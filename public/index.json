[{"authors":null,"categories":[],"content":"tl;dr There’s more than one way to fit a Bayesian correlation in brms.\n Here’s the deal. In the last post, we considered how we might estimate correlations when our data contain influential outlier values. Our big insight was that if we use variants of Student’s \\(t\\)-distribution as the likelihood rather than the conventional normal distribution, our correlation estimates were less influenced by those outliers. And we mainly did that as Bayesians using the brms package. Click here for a refresher.\nSince the brms package is designed to fit regression models, it can be surprising when you discover it’s handy for correlations, too. In short, you can fit them using a few tricks based on the multivariate syntax.\nShortly after uploading the post, it occurred to me we had more options and it might be useful to walk through them a bit.\n I assume things. For this post, I’m presuming you are vaguely familiar with linear regression–both univariate and multivariate–, have a little background with Bayesian statistics, and have used Paul Bürkner’s brms packge. As you might imagine, all code in is R, with a heavy use of the tidyverse.\n We need data. First, we’ll load our main packages.\nlibrary(mvtnorm) library(brms) library(tidyverse) We’ll use the mvtnorm package to simulate three positively correlated variables.\nm \u0026lt;- c(10, 15, 20) # the means s \u0026lt;- c(10, 20, 30) # the sigmas r \u0026lt;- c(.9, .6, .3) # the correlations # here\u0026#39;s the variance/covariance matrix v \u0026lt;- matrix(c((s[1] * s[1]), (s[2] * s[1] * r[1]), (s[3] * s[1] * r[2]), (s[2] * s[1] * r[1]), (s[2] * s[2]), (s[3] * s[2] * r[3]), (s[3] * s[1] * r[2]), (s[3] * s[2] * r[3]), (s[3] * s[3])), nrow = 3, ncol = 3) # after setting our seed, we\u0026#39;re ready to simulate with `rmvnorm()` set.seed(1) d \u0026lt;- rmvnorm(n = 50, mean = m, sigma = v) %\u0026gt;% as_tibble() %\u0026gt;% set_names(\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;z\u0026quot;) Our data look like so.\nlibrary(GGally) theme_set(theme_gray() + theme(panel.grid = element_blank())) d %\u0026gt;% ggpairs() Do note the Pearson’s correlation coefficients in the upper triangle.\nIn order to exploit all the methods we’ll cover in this post, we need to standardize our data. Here we do so by hand using the typical formula\n\\[z_{x_i} = \\frac{x_i - \\overline x}{s_x}\\]\nwhere \\(\\overline x\\) is the observed mean and \\(s_x\\) is the observed standard deviation.\nd \u0026lt;- d %\u0026gt;% mutate(x_s = (x - mean(x)) / sd(x), y_s = (y - mean(y)) / sd(y), z_s = (z - mean(z)) / sd(z)) head(d) ## # A tibble: 6 x 6 ## x y z x_s y_s z_s ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 3.90 11.5 -6.90 -0.723 -0.308 -0.928 ## 2 17.7 29.5 4.01 0.758 0.653 -0.512 ## 3 20.4 33.8 41.5 1.05 0.886 0.917 ## 4 20.3 42.1 34.8 1.04 1.33 0.663 ## 5 -3.64 -26.8 43.5 -1.53 -2.36 0.994 ## 6 13.9 17.3 47.6 0.347 0.00255 1.15 There are at least two broad ways to get correlations out of standardized data in brms. One way uses the typical univariate syntax. The other way is an extension of the multivariate cbind() approach. Let’s start univariate.\nAnd for a point of clarification, we’re presuming the Gaussian likelihood for all the examples in this post.\n Univariate If you fit a simple univariate model with standardized data and a single predictor, the coefficient for the slope will be in a correlation-like metric. Happily, since the data are all standardized, it’s easy to use regularizing priors.\nf1 \u0026lt;- brm(data = d, family = gaussian, y_s ~ 1 + x_s, prior = c(prior(normal(0, 1), class = Intercept), prior(normal(0, 1), class = b), prior(normal(0, 1), class = sigma)), chains = 4, cores = 4, seed = 1) Take a look at the model summary.\nprint(f1) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: y_s ~ 1 + x_s ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.00 0.06 -0.12 0.12 3602 1.00 ## x_s 0.91 0.06 0.78 1.03 3324 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma 0.42 0.04 0.35 0.52 3492 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). The ‘Population-Level Effects’ has the summary information for our intercept and slope. Notice how our x_s slope is the same as the Pearson’s correlation.\ncor(d$x, d$y) ## [1] 0.9119708 Since this approach only yields one correlation at a time, we have to fit two more models to get the other two correlations. To do so with haste, we can use the update() syntax.\nf2 \u0026lt;- update(f1, newdata = d, formula = z_s ~ 1 + x_s) f3 \u0026lt;- update(f2, newdata = d, formula = z_s ~ 1 + y_s) With the fixef() function, we can easily isolate the \\(\\beta\\) estimates.\nfixef(f2)[2, ] ## Estimate Est.Error Q2.5 Q97.5 ## 0.5857431 0.1200180 0.3491512 0.8181209 fixef(f3)[2, ] ## Estimate Est.Error Q2.5 Q97.5 ## 0.31295659 0.13847579 0.03713735 0.58539395 There’s another thing I’d like to point out. Plotting the model results will help make the point.\n# define the predictor values you\u0026#39;d like the fitted values for nd \u0026lt;- tibble(x_s = seq(from = -3, to = 3, length.out = d %\u0026gt;% nrow())) # wrangle fitted(f1, newdata = nd) %\u0026gt;% as_tibble() %\u0026gt;% bind_cols(nd) %\u0026gt;% # plot ggplot(aes(x_s)) + geom_vline(xintercept = 0, color = \u0026quot;white\u0026quot;) + geom_hline(yintercept = 0, color = \u0026quot;white\u0026quot;) + geom_point(data = d, aes(y = y_s)) + geom_smooth(aes(y = Estimate, ymin = Q2.5, ymax = Q97.5), stat = \u0026quot;identity\u0026quot;, alpha = 1/4, size = 1/2) + coord_cartesian(xlim = range(d$x_s), ylim = range(d$y_s)) The blue line is the posterior mean and the surrounding gray ribbon depicts the 95% posterior interval. Notice how the data and their respective fitted lines pass through [0, 0]? This is a consequence of modeling standardized data. We should always expect the intercept of a model like this to be 0. Here are the intercept summaries for all three models.\nfixef(f1)[\u0026quot;Intercept\u0026quot;, ] %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## 0.001 0.061 -0.120 0.119 fixef(f2)[\u0026quot;Intercept\u0026quot;, ] %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## -0.001 0.117 -0.227 0.223 fixef(f3)[\u0026quot;Intercept\u0026quot;, ] %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## -0.003 0.140 -0.282 0.267 Within simulation error, they’re all centered on zero. So instead of estimating the intercept, why not just bake that into the models? Here we refit the models by fixing the intercept for each to zero.\nf4 \u0026lt;- update(f1, formula = y_s ~ 0 + x_s) f5 \u0026lt;- update(f4, newdata = d, formula = z_s ~ 0 + x_s) f6 \u0026lt;- update(f4, newdata = d, formula = z_s ~ 0 + y_s) Let’s take a look at the summary for the first.\nprint(f4) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: y_s ~ x_s - 1 ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_s 0.91 0.06 0.79 1.03 2562 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma 0.42 0.04 0.35 0.52 2440 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Even though it may have seemed like we substantially changed the models by fixing the intercepts to 0, the summaries are essentially the same as when we estimated the intercepts. Here we’ll confirm the summaries with a plot, like above.\n# wrangle fitted(f4, newdata = nd) %\u0026gt;% as_tibble() %\u0026gt;% bind_cols(nd) %\u0026gt;% # plot ggplot(aes(x_s)) + geom_vline(xintercept = 0, color = \u0026quot;white\u0026quot;) + geom_hline(yintercept = 0, color = \u0026quot;white\u0026quot;) + geom_point(data = d, aes(y = y_s)) + geom_smooth(aes(y = Estimate, ymin = Q2.5, ymax = Q97.5), stat = \u0026quot;identity\u0026quot;, alpha = 1/4, size = 1/2) + coord_cartesian(xlim = range(d$x_s), ylim = range(d$y_s)) The difference is subtle. By fixing the intercepts at 0, we estimated the slopes (i.e., the correlations) with increased precision as demonstrated by the slightly smaller posterior standard deviations (i.e., the values in the ‘Est.Error’ columns).\nHere are the correlation summaries for those last three models.\nfixef(f4) %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## x_s 0.907 0.062 0.786 1.029 fixef(f5) %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## x_s 0.584 0.122 0.352 0.823 fixef(f6) %\u0026gt;% round(3) ## Estimate Est.Error Q2.5 Q97.5 ## y_s 0.316 0.137 0.052 0.583 But anyway, you get the idea. If you want to estimate a correlation in brms using simple univariate syntax, just (a) standardize the data and (b) fit a univariate model with or without an intercept. The slop will be in a correlation-like metric.\n Let’s go multivariate. If you don’t recall the steps to fit correlations in brms with the multivariate syntax, here they are:\n List the variables you’d like correlations for within cbind(). Place the cbind() function within the left side of the model formula. On the right side of the model formula, indicate you only want intercepts (i.e., ~ 1).  f7 \u0026lt;- brm(data = d, family = gaussian, cbind(x_s, y_s, z_s) ~ 1, prior = c(prior(normal(0, 1), class = Intercept), prior(normal(1, 1), class = sigma, resp = xs), prior(normal(1, 1), class = sigma, resp = ys), prior(normal(1, 1), class = sigma, resp = zs), prior(lkj(2), class = rescor)), chains = 4, cores = 4, seed = 1) Behold the summary.\nprint(f7) ## Family: MV(gaussian, gaussian, gaussian) ## Links: mu = identity; sigma = identity ## mu = identity; sigma = identity ## mu = identity; sigma = identity ## Formula: x_s ~ 1 ## y_s ~ 1 ## z_s ~ 1 ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## xs_Intercept -0.01 0.13 -0.27 0.24 2318 1.00 ## ys_Intercept -0.01 0.13 -0.28 0.25 2500 1.00 ## zs_Intercept -0.00 0.14 -0.28 0.28 3068 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_xs 0.99 0.10 0.82 1.19 2222 1.00 ## sigma_ys 1.00 0.10 0.83 1.23 2158 1.00 ## sigma_zs 1.02 0.10 0.84 1.25 3043 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(xs,ys) 0.90 0.03 0.83 0.94 2344 1.00 ## rescor(xs,zs) 0.55 0.09 0.35 0.71 3114 1.00 ## rescor(ys,zs) 0.25 0.12 0.01 0.48 2908 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Look at the ‘Residual Correlations:’ section at the bottom of the output. Since there are no predictors in the model, the residual correlations are just correlations. Now notice how the intercepts in this model are also hovering around 0, just like in our univariate models. Yep, we can fix those, too.\nf8 \u0026lt;- brm(data = d, family = gaussian, cbind(x_s, y_s, z_s) ~ 0, prior = c(prior(normal(1, 1), class = sigma, resp = xs), prior(normal(1, 1), class = sigma, resp = ys), prior(normal(1, 1), class = sigma, resp = zs), prior(lkj(2), class = rescor)), chains = 4, cores = 4, seed = 1) Without the intercepts, the rest of the model is the same within simulation variance.\nprint(f8) ## Family: MV(gaussian, gaussian, gaussian) ## Links: mu = identity; sigma = identity ## mu = identity; sigma = identity ## mu = identity; sigma = identity ## Formula: x_s ~ 0 ## y_s ~ 0 ## z_s ~ 0 ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_xs 0.98 0.09 0.81 1.19 1768 1.00 ## sigma_ys 0.99 0.10 0.82 1.20 1775 1.00 ## sigma_zs 1.02 0.10 0.84 1.24 2642 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(xs,ys) 0.90 0.03 0.83 0.94 2491 1.00 ## rescor(xs,zs) 0.55 0.10 0.35 0.71 2661 1.00 ## rescor(ys,zs) 0.26 0.13 0.01 0.50 2615 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). If you wanna get silly, we can prune even further. Did you notice how the estimates for \\(\\sigma\\) are all hovering around 1? Since we have no predictors, \\(\\sigma\\) is just an estimate of the population standard deviation. And since we’re working with standardized data, the population standard deviation has to be 1. Any other estimate would be nonsensical. So why not fix it to 1?\nWith brms, we can fix those \\(\\sigma\\)s to 1 with a trick of the nonlinear distributional modeling syntax. Recall when you model \\(\\sigma\\), the brms default is to actually model its log. As is turns out, the log of 1 is zero.\nlog(1) ## [1] 0 Here’s how to make use of that within brm().\nf9 \u0026lt;- brm(data = d, family = gaussian, bf(cbind(x_s, y_s, z_s) ~ 0, sigma ~ 0), prior = c(prior(lkj(2), class = rescor)), chains = 4, cores = 4, seed = 1) Other than the sigma ~ 0 syntax, the main thing to notice is we’ve wrapped the entire model formula into the bf() function. Here are the results.\nprint(f9) ## Family: MV(gaussian, gaussian, gaussian) ## Links: mu = identity; sigma = log ## mu = identity; sigma = log ## mu = identity; sigma = log ## Formula: x_s ~ 0 ## sigma ~ 0 ## y_s ~ 0 ## sigma ~ 0 ## z_s ~ 0 ## sigma ~ 0 ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(xs,ys) 0.91 0.02 0.87 0.93 2640 1.00 ## rescor(xs,zs) 0.57 0.07 0.42 0.69 3109 1.00 ## rescor(ys,zs) 0.29 0.09 0.11 0.47 3098 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). The correlations are the only things left in the model.\nJust to be clear, the multivariate approach does not require standardized data. To demonstrate, here we refit f7, but with the unstandardized variables. And, since we’re no longer in the standardized metric, we’ll be less certain with our priors.\nf10 \u0026lt;- brm(data = d, family = gaussian, cbind(x, y, z) ~ 1, prior = c(prior(normal(0, 10), class = Intercept), prior(student_t(3, 0, 10), class = sigma, resp = x), prior(student_t(3, 0, 10), class = sigma, resp = y), prior(student_t(3, 0, 10), class = sigma, resp = z), prior(lkj(2), class = rescor)), chains = 4, cores = 4, seed = 1) See, the ‘rescor()’ results are about the same as with f7.\nprint(f10) ## Family: MV(gaussian, gaussian, gaussian) ## Links: mu = identity; sigma = identity ## mu = identity; sigma = identity ## mu = identity; sigma = identity ## Formula: x ~ 1 ## y ~ 1 ## z ~ 1 ## Data: d (Number of observations: 50) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_Intercept 9.64 1.20 7.29 12.00 1821 1.00 ## y_Intercept 15.57 2.47 10.69 20.34 2032 1.00 ## z_Intercept 14.85 3.38 8.00 21.42 2760 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_x 8.99 0.87 7.50 10.91 2005 1.00 ## sigma_y 18.24 1.81 15.18 22.05 1981 1.00 ## sigma_z 26.09 2.62 21.58 31.77 3011 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(x,y) 0.89 0.03 0.83 0.94 2301 1.00 ## rescor(x,z) 0.54 0.09 0.34 0.70 3046 1.00 ## rescor(y,z) 0.24 0.12 -0.00 0.47 2830 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1).  It’s time to compare methods. To recap, we’ve compared several ways to fit correlations in brms. Some of the methods were with univariate syntax, others were with the multivariate syntax. Some of the models had all free parameters, others included fixed intercepts and sigmas. Whereas all the univariate models required standardized data, the multivariate approach can work with unstandardized data, too.\nNow it might be of help to compare the results from each of the methods to get a sense of which ones you might prefer. Before we do so, we’ll define a couple custom functions to streamline the data wrangling.\nget_rho \u0026lt;- function(fit) { posterior_samples(fit) %\u0026gt;% select(starts_with(\u0026quot;b_\u0026quot;), -contains(\u0026quot;Intercept\u0026quot;)) %\u0026gt;% set_names(\u0026quot;rho\u0026quot;) } get_rescor \u0026lt;- function(fit) { posterior_samples(fit) %\u0026gt;% select(starts_with(\u0026quot;rescor\u0026quot;)) %\u0026gt;% set_names(\u0026quot;x with y\u0026quot;, \u0026quot;x with z\u0026quot;, \u0026quot;y with z\u0026quot;) %\u0026gt;% gather(label, rho) %\u0026gt;% select(rho, label) } Now let’s put those functions to work and plot.\nlibrary(tidybayes) # collect the posteriors from the univariate models tibble(name = str_c(\u0026quot;f\u0026quot;, 1:6)) %\u0026gt;% mutate(fit = map(name, get)) %\u0026gt;% mutate(rho = map(fit, get_rho)) %\u0026gt;% unnest(rho) %\u0026gt;% mutate(predictor = rep(c(\u0026quot;x\u0026quot;, \u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;), each = 4000) %\u0026gt;% rep(., times = 2), criterion = rep(c(\u0026quot;y\u0026quot;, \u0026quot;z\u0026quot;, \u0026quot;z\u0026quot;), each = 4000) %\u0026gt;% rep(., times = 2)) %\u0026gt;% mutate(label = str_c(predictor, \u0026quot; with \u0026quot;, criterion)) %\u0026gt;% select(-c(predictor:criterion)) %\u0026gt;% # add in the posteriors from the multivariate models bind_rows( tibble(name = str_c(\u0026quot;f\u0026quot;, 7:10)) %\u0026gt;% mutate(fit = map(name, get)) %\u0026gt;% mutate(post = map(fit, get_rescor)) %\u0026gt;% unnest(post) ) %\u0026gt;% # wrangle a bit just to make the y axis easier to understand mutate(name = factor(name, levels = c(str_c(\u0026quot;f\u0026quot;, 1:10)), labels = c(\u0026quot;1. standardized, univariate\u0026quot;, \u0026quot;2. standardized, univariate\u0026quot;, \u0026quot;3. standardized, univariate\u0026quot;, \u0026quot;4. standardized, univariate, fixed intercepts\u0026quot;, \u0026quot;5. standardized, univariate, fixed intercepts\u0026quot;, \u0026quot;6. standardized, univariate, fixed intercepts\u0026quot;, \u0026quot;7. standardized, multivariate, fixed intercepts\u0026quot;, \u0026quot;8. standardized, multivariate, fixed intercepts\u0026quot;, \u0026quot;9. standardized, multivariate, fixed intercepts/sigmas\u0026quot;, \u0026quot;10. unstandardized, multivariate\u0026quot;))) %\u0026gt;% # plot ggplot(aes(x = rho, y = name)) + geom_vline(data = tibble(label = c(\u0026quot;x with y\u0026quot;, \u0026quot;x with z\u0026quot;, \u0026quot;y with z\u0026quot;), rho = r), aes(xintercept = rho), color = \u0026quot;white\u0026quot;) + geom_halfeyeh(.width = .95, size = 5/4) + scale_x_continuous(breaks = c(0, r)) + labs(x = expression(rho), y = NULL) + coord_cartesian(0:1) + theme(axis.ticks.y = element_blank(), axis.text.y = element_text(hjust = 0)) + facet_wrap(~label, ncol = 3) To my eye, a few patterns emerged. First, the point estimates were about the same across methods. Second, fixing the intercepts didn’t seem to effect things, much. But, third, it appears that fixing the sigmas in the multivariate models did narrow the posteriors a bit.\nFourth, and perhaps most importantly, notice how the posteriors for the multivariate models were more asymmetric when they approached 1. Hopefully this makes intuitive sense. Correlations are bound between -1 and 1. However, standardized regression coefficients are not so bound. Accordingly, notice how the posteriors from the univariate models stayed symmetric when approaching 1 and some of their right tails even crossed over 1. So while the univariate approach did a reasonable job capturing the correlation point estimates, their posteriors weren’t quite in a correlation metric. Alternately, the univariate approach did make it convenient to express the correlations with fitted regression lines in scatter plots.\nBoth univariate and multivariate approaches appear to have their strengths and weaknesses. Choose which methods seems most appropriate for your correlation needs.\nHappy modeling.\nsessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tidybayes_1.0.3 bindrcpp_0.2.2 GGally_1.4.0 forcats_0.3.0 ## [5] stringr_1.3.1 dplyr_0.7.6 purrr_0.2.5 readr_1.1.1 ## [9] tidyr_0.8.1 tibble_2.0.1 tidyverse_1.2.1 brms_2.7.0 ## [13] ggplot2_3.1.0 Rcpp_1.0.0 mvtnorm_1.0-8 ## ## loaded via a namespace (and not attached): ## [1] colorspace_1.3-2 ggridges_0.5.0 ## [3] rsconnect_0.8.8 rprojroot_1.3-2 ## [5] ggstance_0.3 markdown_0.8 ## [7] base64enc_0.1-3 rstudioapi_0.7 ## [9] rstan_2.18.2 svUnit_0.7-12 ## [11] DT_0.4 fansi_0.4.0 ## [13] lubridate_1.7.4 xml2_1.2.0 ## [15] bridgesampling_0.4-0 codetools_0.2-15 ## [17] knitr_1.20 shinythemes_1.1.1 ## [19] bayesplot_1.6.0 jsonlite_1.5 ## [21] broom_0.5.1 shiny_1.1.0 ## [23] compiler_3.5.1 httr_1.3.1 ## [25] backports_1.1.2 assertthat_0.2.0 ## [27] Matrix_1.2-14 lazyeval_0.2.1 ## [29] cli_1.0.1 later_0.7.3 ## [31] htmltools_0.3.6 prettyunits_1.0.2 ## [33] tools_3.5.1 igraph_1.2.1 ## [35] coda_0.19-2 gtable_0.2.0 ## [37] glue_1.3.0 reshape2_1.4.3 ## [39] cellranger_1.1.0 nlme_3.1-137 ## [41] blogdown_0.8 crosstalk_1.0.0 ## [43] xfun_0.3 ps_1.2.1 ## [45] rvest_0.3.2 mime_0.5 ## [47] miniUI_0.1.1.1 gtools_3.8.1 ## [49] MASS_7.3-50 zoo_1.8-2 ## [51] scales_1.0.0 colourpicker_1.0 ## [53] hms_0.4.2 promises_1.0.1 ## [55] Brobdingnag_1.2-5 parallel_3.5.1 ## [57] inline_0.3.15 shinystan_2.5.0 ## [59] RColorBrewer_1.1-2 yaml_2.1.19 ## [61] gridExtra_2.3 loo_2.0.0 ## [63] StanHeaders_2.18.0-1 reshape_0.8.7 ## [65] stringi_1.2.3 dygraphs_1.1.1.5 ## [67] pkgbuild_1.0.2 rlang_0.3.1 ## [69] pkgconfig_2.0.2 matrixStats_0.54.0 ## [71] evaluate_0.10.1 lattice_0.20-35 ## [73] bindr_0.1.1 rstantools_1.5.0 ## [75] htmlwidgets_1.2 labeling_0.3 ## [77] processx_3.2.1 tidyselect_0.2.4 ## [79] plyr_1.8.4 magrittr_1.5 ## [81] bookdown_0.7 R6_2.3.0 ## [83] generics_0.0.2 pillar_1.3.1 ## [85] haven_1.1.2 withr_2.1.2 ## [87] xts_0.10-2 abind_1.4-5 ## [89] modelr_0.1.2 crayon_1.3.4 ## [91] arrayhelpers_1.0-20160527 utf8_1.1.4 ## [93] rmarkdown_1.10 grid_3.5.1 ## [95] readxl_1.1.0 callr_3.1.0 ## [97] threejs_0.3.1 digest_0.6.18 ## [99] xtable_1.8-2 httpuv_1.4.4.2 ## [101] stats4_3.5.1 munsell_0.5.0 ## [103] shinyjs_1.0  ","date":1550275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550275200,"objectID":"f70534a142af3425568fd55e32d46a6b","permalink":"/post/bayesian-correlations-let-s-talk-options/","publishdate":"2019-02-16T00:00:00Z","relpermalink":"/post/bayesian-correlations-let-s-talk-options/","section":"post","summary":"tl;dr There’s more than one way to fit a Bayesian correlation in brms.\n Here’s the deal. In the last post, we considered how we might estimate correlations when our data contain influential outlier values. Our big insight was that if we use variants of Student’s \\(t\\)-distribution as the likelihood rather than the conventional normal distribution, our correlation estimates were less influenced by those outliers. And we mainly did that as Bayesians using the brms package.","tags":["Bayesian","brms","R","tutorial"],"title":"Bayesian Correlations: Let’s Talk Options.","type":"post"},{"authors":null,"categories":[],"content":"In this post, we’ll show how Student’s \\(t\\)-distribution can produce better correlation estimates when your data have outliers. As is often the case, we’ll do so as Bayesians.\nThis post is a direct consequence of Adrian Baez-Ortega’s great blog, “Bayesian robust correlation with Stan in R (and why you should use Bayesian methods)”. Baez-Ortega worked out the approach and code for direct use with Stan computational environment. That solution is great because Stan is free, open source, and very flexible. However, Stan’s interface might be prohibitively technical for non-statistician users. Happily, the brms package allows users to access the computational power of Stan through a simpler interface. In this post, we show how to extend Baez-Ortega’s method to brms. To pay respects where they’re due, the synthetic data, priors, and other model settings are largely the same as those Baez-Ortega used in his blog.\nI make assumptions For this post, I’m presuming you are vaguely familiar with linear regression, know about the basic differences between frequentist and Bayesian approaches to fitting models, and have a sense that the issue of outlier values is a pickle worth contending with. All code in is R, with a heavy use of the tidyverse–which you might learn a lot about here, especially chapter 5–, and, of course, Bürkner’s brms.\nIf you’d like a warmup, consider checking out my related post, Robust Linear Regression with Student’s \\(t\\)-Distribution.\n What’s the deal? Pearson’s correlations are designed to quantify the linear relationship between two normally distributed variables. The normal distribution and its multivariate generalization, the multivariate normal distribution, are sensitive to outliers. When you have well-behaved synthetic data, this isn’t an issue. But if you work real-world data, this can be a problem. One can have data for which the vast majority of cases are well-characterized by a nice liner relationship, but have a few odd cases for which that relationship does not hold. And if those odd cases happen to be overly influential–sometimes called leverage points–the resulting Pearson’s correlation coefficient might look off.\nRecall that the normal distribution is a special case of Student’s \\(t\\)-distribution with the \\(\\nu\\) parameter (i.e., nu, degree of freedom) set to infinity. As it turns out, when \\(\\nu\\) is small, Student’s \\(t\\)-distribution is more robust to multivariate outliers. It’s less influenced by them. I’m not going to cover why in any detail. For that you’ve got Baez-Ortega’s blog, an even earlier blog from Rasmus Bååth, and textbook treatments on the topic by Gelman \u0026amp; Hill (2007, chapter 6) and Kruschke (2014, chapter 16). Here we’ll get a quick sense of how vulnerable Pearson’s correlations–with their reliance on the Gaussian–are to outliers, we’ll demonstrate how fitting correlations within the Bayesian paradigm using the conventional Gaussian likelihood is similarly vulnerable to distortion, and then see how Student’s \\(t\\)-distribution can save the day. And importantly, we’ll do the bulk of this with the brms package.\n We need data To start off, we’ll make a multivariate normal simulated data set using the same steps Baez-Ortega’s used.\nlibrary(mvtnorm) library(tidyverse) sigma \u0026lt;- c(20, 40) # the variances rho \u0026lt;- -.95 # the desired correlation # here\u0026#39;s the variance/covariance matrix cov.mat \u0026lt;- matrix(c(sigma[1] ^ 2, sigma[1] * sigma[2] * rho, sigma[1] * sigma[2] * rho, sigma[2] ^ 2), nrow = 2, byrow = T) # after setting our seed, we\u0026#39;re ready to simulate with `rmvnorm()` set.seed(210191) x.clean \u0026lt;- rmvnorm(n = 40, sigma = cov.mat) %\u0026gt;% as_tibble() %\u0026gt;% rename(x = V1, y = V2) Here we make our second data set, x.noisy, which is identical to our well-behaved x.clean data, but with the first three cases transformed to outlier values.\nx.noisy \u0026lt;- x.clean x.noisy[1:3,] \u0026lt;- matrix(c(-40, -60, 20, 100, 40, 40), nrow = 3, byrow = T) Finally, we’ll add an outlier index to the data sets, which will help us with plotting.\nx.clean \u0026lt;- x.clean %\u0026gt;% mutate(outlier = factor(0)) x.noisy \u0026lt;- x.noisy %\u0026gt;% mutate(outlier = c(rep(1, 3), rep(0, 37)) %\u0026gt;% as.factor(.)) The plot below shows what the x.clean data look like. I’m a fan of FiveThirtyEight, so we’ll use a few convenience functions from the handy ggthemes package to give our plots a FiveThirtyEight-like feel.\nlibrary(ggthemes) x.clean %\u0026gt;% ggplot(aes(x = x, y = y, color = outlier, fill = outlier)) + geom_point() + stat_ellipse(geom = \u0026quot;polygon\u0026quot;, alpha = .15, size = .15, level = .5) + stat_ellipse(geom = \u0026quot;polygon\u0026quot;, alpha = .15, size = .15, level = .95) + scale_color_fivethirtyeight() + scale_fill_fivethirtyeight() + coord_cartesian(xlim = -50:50, ylim = -100:100) + theme_fivethirtyeight() + theme(legend.position = \u0026quot;none\u0026quot;) And here are the x.noisy data.\nx.noisy %\u0026gt;% ggplot(aes(x = x, y = y, color = outlier, fill = outlier)) + geom_point() + stat_ellipse(geom = \u0026quot;polygon\u0026quot;, alpha = .15, size = .15, level = .5) + stat_ellipse(geom = \u0026quot;polygon\u0026quot;, alpha = .15, size = .15, level = .95) + scale_color_fivethirtyeight() + scale_fill_fivethirtyeight() + coord_cartesian(xlim = -50:50, ylim = -100:100) + theme_fivethirtyeight() + theme(legend.position = \u0026quot;none\u0026quot;) The three outliers are in red. Even in their presence, the old interocular trauma test suggests there is a pronounced overall trend in the data. I would like a correlation procedure that’s capable of capturing that overall trend. Let’s examine some candidates.\n How does old Pearson hold up? A quick way to get a Pearson’s correlation coefficient in R is with the cor() function, which does a nice job recovering the correlation we simulated the x.clean data with:\ncor(x.clean$x, x.clean$y) ## [1] -0.959702 However, things fall apart if you use cor() on the x.noisy data.\ncor(x.noisy$x, x.noisy$y) ## [1] -0.6365649 So even though most of the x.noisy data continue to show a clear strong relation, three outlier values reduced the Pearson’s correlation a third of the way toward zero. Let’s see what happens when we go Bayesian.\n Bayesian correlations in brms Bürkner’s brms is a general purpose interface for fitting all manner of Bayesian regression models with Stan as the engine under the hood. It has popular lme4-like syntax and offers a variety of convenience functions for post processing. Let’s load it up.\nlibrary(brms) First with the Gaussian likelihood. I’m not going to spend a lot of time walking through the syntax in the main brms function, brm(). You can learn all about that here or with my project Statistical Rethinking with brms, ggplot2, and the tidyverse. But our particular use of brm() requires we make a few fine points.\nOne doesn’t always think about bivariate correlations within the regression paradigm. But they work just fine. Within brms, you would typically specify the conventional Gaussian likelihood (i.e., family = gaussian), use the cbind() syntax to set up a multivariate model, and fit that model without predictors. For each variable specified in cbind(), you’ll estimate an intercept (i.e., mean, \\(\\mu\\)) and sigma (i.e., \\(\\sigma\\), often called a residual variance). Since there are no predictors in the model, the residual variance is just the variance and the brms default for multivariate models is to allow the residual variances to covary. But since variances are parameterized in the standard deviation metric in brms, the residual variances and their covariance are SDs and their correlation, respectively.\nHere’s what it looks like in practice.\nf0 \u0026lt;- brm(data = x.clean, family = gaussian, cbind(x, y) ~ 1, prior = c(prior(normal(0, 100), class = Intercept), prior(normal(0, 100), class = sigma, resp = x), prior(normal(0, 100), class = sigma, resp = y), prior(lkj(1), class = rescor)), iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 210191) In a typical Bayesian workflow, you’d examine the quality of the chains with trace plots. The easy way to do that in brms is with plot(). E.g., to get the trace plots for our first model, you’d code plot(f0). Happily, the trace plots look fine for all models in this post. For the sake of space, I’ll leave their inspection as exercises for interested readers.\nOur priors and such mirror those in Baez-Ortega’s blog. Here are the results.\nprint(f0) ## Family: MV(gaussian, gaussian) ## Links: mu = identity; sigma = identity ## mu = identity; sigma = identity ## Formula: x ~ 1 ## y ~ 1 ## Data: x.clean (Number of observations: 40) ## Samples: 4 chains, each with iter = 2000; warmup = 500; thin = 1; ## total post-warmup samples = 6000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_Intercept -2.83 3.33 -9.33 3.69 2995 1.00 ## y_Intercept 3.55 6.65 -9.45 16.60 2972 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_x 21.47 2.47 17.29 26.99 2453 1.00 ## sigma_y 42.93 4.86 34.55 53.51 2418 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(x,y) -0.95 0.02 -0.98 -0.92 2636 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Way down there in the last line in the ‘Family Specific Parameters’ section we have rescor(x,y), which is our correlation. And indeed, our Gaussian intercept-only multivariate model did a great job recovering the correlation we used to simulate the x.clean data with. Look at what happens when we try this approach with x.noisy.\nf1 \u0026lt;- update(f0, newdata = x.noisy, iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 210191) print(f1) ## Family: MV(gaussian, gaussian) ## Links: mu = identity; sigma = identity ## mu = identity; sigma = identity ## Formula: x ~ 1 ## y ~ 1 ## Data: x.noisy (Number of observations: 40) ## Samples: 4 chains, each with iter = 2000; warmup = 500; thin = 1; ## total post-warmup samples = 6000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_Intercept -2.95 3.75 -10.39 4.57 4477 1.00 ## y_Intercept 6.52 7.45 -8.31 20.98 4692 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_x 23.65 2.76 18.97 29.83 4312 1.00 ## sigma_y 47.20 5.42 37.94 59.03 4332 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(x,y) -0.61 0.10 -0.78 -0.39 4480 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). And the correlation estimate is -.61. As it turns out, data = x.noisy + family = gaussian in brm() failed us just like Pearson’s correlation failed us. Time to leave failure behind.\n Now with Student’s \\(t\\)-distribution. Before we jump into using family = student, we should talk a bit about \\(\\nu\\). This is our new parameter which is silently fixed to infinity when we use the Gaussian likelihood. The \\(\\nu\\) parameter is bound at zero but, as discussed in Baez-Ortega’s blog, is somewhat nonsensical for values below 1. As it turns out, \\(\\nu\\) is constrained to be equal to or greater than 1 in brms. So nothing for us to worry about, there. The Stan team currently recommends the gamma(2, 0.1) prior for \\(\\nu\\), which is also the current brms default. This is what that distribution looks like.\ntibble(x = seq(from = 1, to = 120, by = .5)) %\u0026gt;% ggplot(aes(x = x, fill = factor(0))) + geom_ribbon(aes(ymin = 0, ymax = dgamma(x, 2, 0.1))) + scale_y_continuous(NULL, breaks = NULL) + scale_fill_fivethirtyeight() + coord_cartesian(xlim = 0:100) + ggtitle(\u0026quot;gamma(2, 0.1)\u0026quot;) + theme_fivethirtyeight() + theme(legend.position = \u0026quot;none\u0026quot;) So gamma(2, 0.1) should gently push the \\(\\nu\\) posterior toward low values, but it’s slowly-sloping right tail will allow higher values to emerge.\nFollowing the Stan team’s recommendation, the brms default and Baez-Ortega’s blog, here’s our robust Student’s \\(t\\) model for the x.noisy data.\nf2 \u0026lt;- brm(data = x.noisy, family = student, cbind(x, y) ~ 1, prior = c(prior(gamma(2, .1), class = nu), prior(normal(0, 100), class = Intercept), prior(normal(0, 100), class = sigma, resp = x), prior(normal(0, 100), class = sigma, resp = y), prior(lkj(1), class = rescor)), iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 210191) print(f2) ## Family: MV(student, student) ## Links: mu = identity; sigma = identity; nu = identity ## mu = identity; sigma = identity; nu = identity ## Formula: x ~ 1 ## y ~ 1 ## Data: x.noisy (Number of observations: 40) ## Samples: 4 chains, each with iter = 2000; warmup = 500; thin = 1; ## total post-warmup samples = 6000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_Intercept -2.11 3.61 -9.22 4.96 2936 1.00 ## y_Intercept 1.93 7.12 -11.74 16.03 2949 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_x 18.26 2.92 13.06 24.48 3188 1.00 ## sigma_y 36.31 5.79 26.08 48.60 3206 1.00 ## nu 2.65 1.00 1.36 5.13 3905 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(x,y) -0.93 0.03 -0.97 -0.84 3484 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Whoa, look at that correlation, rescore(x,y)! It’s right about what we’d hope for. Sure, it’s not a perfect -.95, but that’s way better than -.61.\nWhile we’re at it, we may as well see what happens when we fit a Student’s \\(t\\) model when we have perfectly multivariate normal data. Here it is with the x.clean data.\nf3 \u0026lt;- update(f2, newdata = x.clean, iter = 2000, warmup = 500, chains = 4, cores = 4, seed = 210191) print(f3) ## Family: MV(student, student) ## Links: mu = identity; sigma = identity; nu = identity ## mu = identity; sigma = identity; nu = identity ## Formula: x ~ 1 ## y ~ 1 ## Data: x.clean (Number of observations: 40) ## Samples: 4 chains, each with iter = 2000; warmup = 500; thin = 1; ## total post-warmup samples = 6000 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## x_Intercept -2.37 3.50 -9.20 4.39 2909 1.00 ## y_Intercept 2.71 6.98 -10.90 16.48 3032 1.00 ## ## Family Specific Parameters: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sigma_x 20.79 2.60 16.28 26.60 2388 1.00 ## sigma_y 41.34 5.17 32.33 52.62 2417 1.00 ## nu 22.42 13.78 5.70 57.53 4384 1.00 ## ## Residual Correlations: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## rescor(x,y) -0.96 0.01 -0.98 -0.92 3045 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). So when you don’t need Student’s \\(t\\), it yields the right answer anyways. That’s a nice feature.\nWe should probably compare the posteriors of the correlations across the four models. First we’ll collect the posterior samples into a tibble.\nposts \u0026lt;- tibble(model = str_c(\u0026quot;f\u0026quot;, 0:3)) %\u0026gt;% mutate(fit = map(model, get)) %\u0026gt;% mutate(post = map(fit, posterior_samples)) %\u0026gt;% unnest(post) head(posts) ## # A tibble: 6 x 8 ## model b_x_Intercept b_y_Intercept sigma_x sigma_y rescor__x__y lp__ ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 f0 1.31 -5.60 18.2 37.8 -0.947 -353. ## 2 f0 -7.41 10.6 25.2 50.5 -0.941 -357. ## 3 f0 -4.51 5.65 23.3 49.4 -0.975 -354. ## 4 f0 -2.65 -0.597 18.3 37.3 -0.929 -354. ## 5 f0 -2.76 -1.50 18.4 37.5 -0.923 -355. ## 6 f0 -9.84 15.2 26.3 45.1 -0.953 -358. ## # … with 1 more variable: nu \u0026lt;dbl\u0026gt; With the posterior draws in hand, we just need to wrangle a bit before showing the correlation posteriors in a coefficient plot. To make things easier, we’ll do so with a couple convenience functions from the tidybayes package.\nlibrary(tidybayes) # wrangle posts %\u0026gt;% group_by(model) %\u0026gt;% median_qi(rescor__x__y, .width = c(.5, .95)) %\u0026gt;% mutate(key = recode(model, f0 = \u0026quot;Gaussian likelihood with clean data\u0026quot;, f1 = \u0026quot;Gaussian likelihood with noisy data\u0026quot;, f2 = \u0026quot;Student likelihood with noisy data\u0026quot;, f3 = \u0026quot;Student likelihood with clean data\u0026quot;), clean = ifelse(model %in% c(\u0026quot;f0\u0026quot;, \u0026quot;f3\u0026quot;), \u0026quot;0\u0026quot;, \u0026quot;1\u0026quot;)) %\u0026gt;% # plot ggplot(aes(x = rescor__x__y, y = key, color = clean)) + geom_pointintervalh() + scale_color_fivethirtyeight() + coord_cartesian(xlim = -1:0) + labs(subtitle = expression(paste(\u0026quot;The posterior for \u0026quot;, rho, \u0026quot; depends on the likelihood. Why not go robust and use Student\u0026#39;s \u0026quot;, italic(t), \u0026quot;?\u0026quot;))) + theme_fivethirtyeight() + theme(axis.text.y = element_text(hjust = 0), legend.position = \u0026quot;none\u0026quot;) From our tidybayes::median_qi() code, the dots are the posterior medians, the thick inner lines the 50% intervals, and the thinner outer lines the 95% intervals. The posteriors for the x.noisy data are in red and those for the x.clean data are in blue. If the data are clean multivariate normal Gaussian or if they’re dirty but fit with robust Student’s \\(t\\), everything is pretty much alright. But whoa, if you fit a correlation with a combination of family = gaussian and noisy outlier-laden data, man that’s just a mess.\nDon’t let a few overly-influential outliers make a mess of your analyses. Try the robust Student’s \\(t\\).\nsessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tidybayes_1.0.3 brms_2.7.0 Rcpp_1.0.0 ggthemes_4.0.1 ## [5] bindrcpp_0.2.2 forcats_0.3.0 stringr_1.3.1 dplyr_0.7.6 ## [9] purrr_0.2.5 readr_1.1.1 tidyr_0.8.1 tibble_2.0.1 ## [13] ggplot2_3.1.0 tidyverse_1.2.1 mvtnorm_1.0-8 ## ## loaded via a namespace (and not attached): ## [1] readxl_1.1.0 backports_1.1.2 ## [3] Hmisc_4.1-1 plyr_1.8.4 ## [5] igraph_1.2.1 lazyeval_0.2.1 ## [7] splines_3.5.1 svUnit_0.7-12 ## [9] crosstalk_1.0.0 rstantools_1.5.0 ## [11] inline_0.3.15 digest_0.6.18 ## [13] htmltools_0.3.6 rsconnect_0.8.8 ## [15] gdata_2.18.0 fansi_0.4.0 ## [17] magrittr_1.5 checkmate_1.8.5 ## [19] cluster_2.0.7-1 modelr_0.1.2 ## [21] matrixStats_0.54.0 xts_0.10-2 ## [23] prettyunits_1.0.2 colorspace_1.3-2 ## [25] rvest_0.3.2 haven_1.1.2 ## [27] pan_1.6 xfun_0.3 ## [29] callr_3.1.0 crayon_1.3.4 ## [31] jsonlite_1.5 lme4_1.1-17 ## [33] bindr_0.1.1 survival_2.42-3 ## [35] zoo_1.8-2 glue_1.3.0 ## [37] gtable_0.2.0 pkgbuild_1.0.2 ## [39] weights_1.0 rstan_2.18.2 ## [41] jomo_2.6-2 abind_1.4-5 ## [43] scales_1.0.0 miniUI_0.1.1.1 ## [45] xtable_1.8-2 htmlTable_1.12 ## [47] ggstance_0.3 foreign_0.8-70 ## [49] Formula_1.2-3 stats4_3.5.1 ## [51] StanHeaders_2.18.0-1 DT_0.4 ## [53] htmlwidgets_1.2 httr_1.3.1 ## [55] threejs_0.3.1 arrayhelpers_1.0-20160527 ## [57] RColorBrewer_1.1-2 acepack_1.4.1 ## [59] mice_3.1.0 pkgconfig_2.0.2 ## [61] loo_2.0.0 nnet_7.3-12 ## [63] utf8_1.1.4 tidyselect_0.2.4 ## [65] labeling_0.3 rlang_0.3.1 ## [67] reshape2_1.4.3 later_0.7.3 ## [69] munsell_0.5.0 cellranger_1.1.0 ## [71] tools_3.5.1 cli_1.0.1 ## [73] generics_0.0.2 broom_0.5.1 ## [75] ggridges_0.5.0 evaluate_0.10.1 ## [77] yaml_2.1.19 processx_3.2.1 ## [79] knitr_1.20 mitml_0.3-6 ## [81] nlme_3.1-137 mime_0.5 ## [83] xml2_1.2.0 compiler_3.5.1 ## [85] bayesplot_1.6.0 shinythemes_1.1.1 ## [87] rstudioapi_0.7 stringi_1.2.3 ## [89] ps_1.2.1 blogdown_0.8 ## [91] Brobdingnag_1.2-5 lattice_0.20-35 ## [93] Matrix_1.2-14 nloptr_1.0.4 ## [95] markdown_0.8 shinyjs_1.0 ## [97] pillar_1.3.1 bridgesampling_0.4-0 ## [99] data.table_1.11.4 httpuv_1.4.4.2 ## [101] R6_2.3.0 latticeExtra_0.6-28 ## [103] bookdown_0.7 promises_1.0.1 ## [105] gridExtra_2.3 colourpicker_1.0 ## [107] MASS_7.3-50 gtools_3.8.1 ## [109] assertthat_0.2.0 rprojroot_1.3-2 ## [111] withr_2.1.2 shinystan_2.5.0 ## [113] parallel_3.5.1 hms_0.4.2 ## [115] grid_3.5.1 rpart_4.1-13 ## [117] coda_0.19-2 minqa_1.2.4 ## [119] rmarkdown_1.10 shiny_1.1.0 ## [121] lubridate_1.7.4 base64enc_0.1-3 ## [123] dygraphs_1.1.1.5   ","date":1549756800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549756800,"objectID":"903cf2640e55664b16933121a277d179","permalink":"/post/bayesian-robust-correlations-with-brms-and-why-you-should-love-student-s-t/","publishdate":"2019-02-10T00:00:00Z","relpermalink":"/post/bayesian-robust-correlations-with-brms-and-why-you-should-love-student-s-t/","section":"post","summary":"In this post, we’ll show how Student’s \\(t\\)-distribution can produce better correlation estimates when your data have outliers. As is often the case, we’ll do so as Bayesians.\nThis post is a direct consequence of Adrian Baez-Ortega’s great blog, “Bayesian robust correlation with Stan in R (and why you should use Bayesian methods)”. Baez-Ortega worked out the approach and code for direct use with Stan computational environment. That solution is great because Stan is free, open source, and very flexible.","tags":["Bayesian","brms","outlier","R","robust","tutorial"],"title":"Bayesian robust correlations with brms (and why you should love Student’s $t$)","type":"post"},{"authors":null,"categories":[],"content":"I’ve been reading David France’s How to Survive a Plague: The Inside Story of How Citizens and Science Tamed AIDS. It’s a masterwork. And it’s devastating. Two months in and I haven’t cracked 100 pages. HSP is the kind of book I can only take 10—20 pages at a time. But like anything soulful and hard and true, it’s worth it.\nFor example, what do you know about the first baby on record to have died of AIDS?\n In San Francisco [November 1982], Dr. Arthur Ammann was feeling frustrated as he studied the results of a bone marrow test he had ordered on a very sick toddler. As an expert in pediatric immunology who traveled regularly throughout Africa, Ammann thought he’d either seen or read about every immune disorder that cold plague a child… But this little boy baffled him. He was born prematurely on March 3, 1981, with pronounced jaundice, a problem caused by toxins accumulating in the blood. This was not extraordinary, and the standard course of treatment was followed: every ounce of his contaminated blood was replaced with donated supplies. The process was repeated five times over a four-day period, followed by additional infusions of blood products like packed red blood cells and platelets. (p. 71)\n Just that alone—fuck.\nAfter the initial bout of treatment, it looked like he was getting better. Dr. Ammann sent him home with his parents.\n But at four months of age his health began to dive. He suffered an enlarged spleen and liver. Jaundice returned, followed by hepatitis of no known origin, then anemia and diarrhea. Now the little boy was twenty months old and in intensive care. (p. 71)\n By mid-1982, gay men, Haitians, and intravenous drug users were known to be at risk for AIDS. But it wasn’t yet clear why.\n Ammann suspected an infection in the child’s bone marrow, which would be highly unusual. Test results were even more surprising than he’d imagined. The child’s culture was positive for Mycobacterium avium-intracellulare, the dreaded cause of wasting syndrome in adults with AIDS. Recently there had been a number of reports of babies who seemed to inherit the disease at birth from their sick mothers, but that was not the case here. Ammann wrote in his case notes that both parents of his patient were “heterosexual non-Haitians and do not have a history of intravenous drug abuse.” He submitted both [parents] to extensive testing, and found no signs of immune deficiency.\nAll he could think was: The blood supply is contaminated. (p. 71, emphasis in the original)\n As is turned out, gay men were particularly generous blood donors at that time.\n Gay men, he learned, were extremely avid blood donors. In fact, in recent months an unnoticed and massive blood drive had been under way in LA’s gay neighborhoods in response to the mounting GRID [i.e., gay-related immune deficiency, as AIDS was known by in the early days] crisis, there. Week after week long lines of men rolled up their sleeves to donate blood, dutifully offering up pint after pint of harm they never dreamed of. (p. 59)\n This was the precursor to a 30-year ban on gay men donating blood—which was overturned in 2015 based on advances in the relevant scientific literature.\n“Pulling the boy’s hospital records, he saw that blood donations from twenty-one separate people had been transfused into the child. Their identities were masked” (p. 71). After some efforts, Ammann and his team determined the relevant donor.\n A man in his late forties… He had donated blood in early 1981. His health had remained unremarkable until that October, when he complained of fatigue, swollen lymph glands, and clouded vision in one eye—classic AIDS symptoms. Doctors diagnosed PCP [i.e., pneumocystis carinii pneumonia, an inflammation and fluid buildup in the lungs most of us conquer in early childhood] in December, and he was dead nine months later.\nThis was the first irrefutable evidence of transmission through the blood supply. (p. 72)\n Shortly after, Ammann and notified the medical community via the CDC’s widely-read Morbidity and Mortality Weekly Report platform. His publication choice was crucial. Had he tried to get published at a more prestigious outlet, such as the New England Journal of Medicine, the peer-review process could have held up the message for months or more. Ammann needed to get the message out to practitioners as soon as possible. The publication lag for the MMWR was trivial. Here’s the report. In an editorial note at the end of the report, we read\n Of the 788 definite AIDS cases among adults reported thus far to CDC, 42 (5.3%) belong to no known risk group (i.e., they are not known to be homosexually active men, intravenous drug abusers, Haitians, or hemophiliacs). Two cases received blood products within 2 years of the onset of their illnesses and are currently under investigation.\n Seven hundred and seventy-eight.\nAccording to the World Health Organization, about 37 million people were living with AIDS in 2017.\nShortly after Ammann’s piece was published,\n a scrum of journalists burst through the CDC’s door for the first time, including correspondents from countless television networks and affiliates. The attention was long overdue. But with images of bouncing toddlers, the reporters warned America that the gay disease was now killing children. It unleashed a torrent of anti-gay violence the likes of which the community had never seen before. (p. 73)\n If you find this topic sad and compelling and worth the heartbreak, there’s more to come.\n","date":1549065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549065600,"objectID":"1bc3af967479ce16b94b9b69f3e1603b","permalink":"/post/how-to-survive-a-plague-part-1-n-of-a-premature-book-report/","publishdate":"2019-02-02T00:00:00Z","relpermalink":"/post/how-to-survive-a-plague-part-1-n-of-a-premature-book-report/","section":"post","summary":"I’ve been reading David France’s How to Survive a Plague: The Inside Story of How Citizens and Science Tamed AIDS. It’s a masterwork. And it’s devastating. Two months in and I haven’t cracked 100 pages. HSP is the kind of book I can only take 10—20 pages at a time. But like anything soulful and hard and true, it’s worth it.\nFor example, what do you know about the first baby on record to have died of AIDS?","tags":["HIV/AIDS"],"title":"\"How to Survive a Plague\": Part 1/$n$ of a premature book report","type":"post"},{"authors":null,"categories":[],"content":"[edited Feb 3, 2018]\nThe purpose of this post is to demonstrate the advantages of the Student’s \\(t\\)-distribution for regression with outliers, particularly within a Bayesian framework.\nI make assumptions I’m presuming you are familiar with linear regression, familiar with the basic differences between frequentist and Bayesian approaches to fitting regression models, and have a sense that the issue of outlier values is a pickle worth contending with. All code in is R, with a heavy use of the tidyverse–which you might learn a lot about here, especially chapter 5– and Paul Bürkner’s brms package.\n The problem Simple regression models typically use the Gaussian likelihood. Say you have some criterion variable \\(y\\), which you can reasonably describe with a mean \\(\\mu\\) and standard deviation \\(\\sigma\\). Further, you’d like to describe \\(y\\) with a predictor \\(x\\). Using the Gaussian likelihood, we can describe the model as\n\\[ \\begin{eqnarray} y_i \u0026amp; \\sim \u0026amp; \\text{Normal}(\\mu_i, \\sigma) \\\\ \\mu_i \u0026amp; = \u0026amp; \\beta_0 + \\beta_1 x_i \\end{eqnarray} \\]\nWith this formulation, we use \\(x\\) to model the mean of \\(y\\). The \\(\\beta_0\\) parameter is the intercept of the regression model and \\(\\beta_1\\) is its slope with respect to \\(x\\). After accounting for \\(y\\)’s relation with \\(x\\), the leftover variability in \\(y\\) is described by \\(\\sigma\\), often called error or residual variance. The reason we describe the model in terms of \\(\\mu\\) and \\(\\sigma\\) is because those are the two parameters by which we define the Normal distribution, the Gaussian likelihood.\nThe Gaussian is a sensible default choice for many data types. You might say it works unreasonably well. Unfortunately, the normal (i.e., Gaussian) distribution is sensitive to outliers.\nThe normal distribution is a special case of Student’s \\(t\\)-distribution with the \\(\\nu\\) parameter (i.e., the degree of freedom) set to infinity. However, when \\(\\nu\\) is small, Student’s \\(t\\)-distribution is more robust to multivariate outliers. See Gelman \u0026amp; Hill (2007, chapter 6) or Kruschke (2014, chapter 16) for textbook treatments on the topic.\nIn this post, we demonstrate how vulnerable the Gaussian likelihood is to outliers and then compare it to different ways of using Student’s \\(t\\)-likelihood for the same data.\nFirst, we’ll get a sense of the distributions with a plot.\nlibrary(tidyverse) tibble(x = seq(from = -6, to = 6, by = .01)) %\u0026gt;% expand(x, nu = c(1, 2.5, 5, 10, Inf)) %\u0026gt;% mutate(density = dt(x = x, df = nu), nu = factor(nu, levels = c(\u0026quot;Inf\u0026quot;, \u0026quot;10\u0026quot;, \u0026quot;5\u0026quot;, \u0026quot;2.5\u0026quot;, \u0026quot;1\u0026quot;))) %\u0026gt;% ggplot(aes(x = x, y = density, group = nu, color = nu)) + geom_line() + scale_color_viridis_d(expression(nu), direction = 1, option = \u0026quot;C\u0026quot;, end = .85) + scale_y_continuous(NULL, breaks = NULL) + coord_cartesian(xlim = -5:5) + xlab(NULL) + theme(panel.grid = element_blank()) So the difference is that a Student’s \\(t\\)-distribution with a low \\(\\nu\\) will have notably heavier tails than the conventional Gaussian distribution. It’s easiest to see the difference when \\(\\nu\\) approaches 1. Even then, the difference can be subtle when looking at a plot. Another way is to compare how probable relatively extreme values are in a Student’s \\(t\\)-distribution relative to the Gaussian. For the sake of demonstration, here we’ll compare Gauss with Student’s \\(t\\) with a \\(\\nu\\) of 5. In the plot above, they are clearly different, but not shockingly so. However, that difference is very notable in the tails.\nLet’s look more closely with a table. Below, we compare the probability of a given z-score or lower within the Gaussian and a \\(\\nu = 5\\) Student’s \\(t\\). In the rightmost column, we compare the probabilities in a ratio.\n# Here we pic our nu nu \u0026lt;- 5 tibble(z_score = 0:-5, p_Gauss = pnorm(z_score, mean = 0, sd = 1), p_Student_t = pt(z_score, df = nu), `Student/Gauss ratio` = p_Student_t/p_Gauss) %\u0026gt;% mutate_if(is.double, round, digits = 5) %\u0026gt;% knitr::kable()   z_score p_Gauss p_Student_t Student/Gauss ratio    0 0.50000 0.50000 1.00000  -1 0.15866 0.18161 1.14468  -2 0.02275 0.05097 2.24042  -3 0.00135 0.01505 11.14871  -4 0.00003 0.00516 162.97775  -5 0.00000 0.00205 7159.76534    Note how low z-scores are more probable in this Student’s \\(t\\) than in the Gaussian. This is most apparent in the Student/Gauss ratio column on the right. A consequence of this is that extreme scores are less influential to your solutions when you use a small-\\(\\nu\\) Student’s \\(t\\)-distribution in place of the Gaussian. That is, the small-\\(\\nu\\) Student’s \\(t\\) is more robust than the Gaussian to unusual and otherwise influential observations.\nIn order to demonstrate, let’s simulate our own. We’ll start by creating multivariate normal data.\n Let’s create our initial tibble of well-behaved data, d First, we’ll need to define our variance/covariance matrix.\ns \u0026lt;- matrix(c(1, .6, .6, 1), nrow = 2, ncol = 2) By the two .6s on the off-diagonal positions, we indicated we’d like our two variables to have a correlation of .6.\nSecond, our variables also need means, which we’ll define with a mean vector.\nm \u0026lt;- c(0, 0) With means of 0 and variances of 1, our data are in a standardized metric.\nThird, we’ll use the mvrnorm() function from the MASS package to simulate our data.\nset.seed(3) d \u0026lt;- MASS::mvrnorm(n = 100, mu = m, Sigma = s) %\u0026gt;% as_tibble() %\u0026gt;% rename(y = V1, x = V2) The first few rows look like so:\nhead(d) ## # A tibble: 6 x 2 ## y x ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 -1.14 -0.584 ## 2 -0.0805 -0.443 ## 3 -0.239 0.702 ## 4 -1.30 -0.761 ## 5 -0.280 0.630 ## 6 -0.245 0.299 As an aside, check out this nice r-bloggers post for more information on simulating data with this method.\nAnyway, this line reorders our data by x, placing the smallest values on top.\nd \u0026lt;- d %\u0026gt;% arrange(x) head(d) ## # A tibble: 6 x 2 ## y x ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 -2.21 -1.84 ## 2 -1.27 -1.71 ## 3 -0.168 -1.60 ## 4 -0.292 -1.46 ## 5 -0.785 -1.40 ## 6 -0.157 -1.37  Let’s create our outlier tibble, o Here we’ll make two outlying and unduly influential values.\no \u0026lt;- d o[c(1:2), 1] \u0026lt;- c(5, 4) head(o) ## # A tibble: 6 x 2 ## y x ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 5 -1.84 ## 2 4 -1.71 ## 3 -0.168 -1.60 ## 4 -0.292 -1.46 ## 5 -0.785 -1.40 ## 6 -0.157 -1.37 With the code, above, we replaced the first two values of our first variable, y. They both started out quite negative. Now they are positive values of a large magnitude within the standardized metric.\n Frequentist OLS models To get a quick sense of what we’ve done, we’ll first fit two models with OLS regression via the lm() function. The first model, ols0, is of the multivariate normal data, d. The second model, ols1, is on the otherwise identical data with the two odd and influential values, o. Here is our model code.\nols0 \u0026lt;- lm(data = d, y ~ 1 + x) ols1 \u0026lt;- lm(data = o, y ~ 1 + x) We’ll use the broom package to assist with model summaries and other things.\nHere are the parameter estimates for the first model.\nlibrary(broom) tidy(ols0) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 (Intercept) -0.01 0.09 -0.08 0.94 ## 2 x 0.45 0.1 4.55 0 And now the parameters for the second model, the one based on the o outlier data.\ntidy(ols1) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 (Intercept) 0.12 0.11 1.12 0.26 ## 2 x 0.15 0.13 1.21 0.23 Just two odd and influential values dramatically changed the model parameters, particularly the slope. Let’s plot the data and the models to get a visual sense of what happened.\n# The well-behaived data p1 \u0026lt;- ggplot(data = d, aes(x = x, y = y)) + stat_smooth(method = \u0026quot;lm\u0026quot;, color = \u0026quot;grey92\u0026quot;, fill = \u0026quot;grey67\u0026quot;, alpha = 1, fullrange = T) + geom_point(size = 1, alpha = 3/4) + scale_x_continuous(limits = c(-4, 4)) + coord_cartesian(xlim = -3:3, ylim = -3:5) + labs(title = \u0026quot;No Outliers\u0026quot;) + theme(panel.grid = element_blank()) # The data with two outliers p2 \u0026lt;- ggplot(data = o, aes(x = x, y = y, color = y \u0026gt; 3)) + stat_smooth(method = \u0026quot;lm\u0026quot;, color = \u0026quot;grey92\u0026quot;, fill = \u0026quot;grey67\u0026quot;, alpha = 1, fullrange = T) + geom_point(size = 1, alpha = 3/4) + scale_color_viridis_d(option = \u0026quot;A\u0026quot;, end = 4/7) + scale_x_continuous(limits = c(-4, 4)) + coord_cartesian(xlim = -3:3, ylim = -3:5) + labs(title = \u0026quot;Two Outliers\u0026quot;) + theme(panel.grid = element_blank(), legend.position = \u0026quot;none\u0026quot;) library(gridExtra) grid.arrange(p1, p2, ncol = 2) The two outliers were quite influential on the slope. It went from a nice clear diagonal to almost horizontal. You’ll also note how the 95% intervals (i.e., the bowtie shapes) were a bit wider when based on the o data.\nOne of the popular ways to quantify outlier status is with Mahalanobis’ distance. However, the Mahalanobis distance is primarilly valid for multivariate normal data. Though the data in this example are indeed multivariate normal–or at least they were before we injected two outlying values into them–I am going to resist relying on Mahalanobis’ distance. There are other more general approaches that will be of greater use when you need to explore other variants of the generalized linear model. The broom::augment() function will give us access to one.\naug0 \u0026lt;- augment(ols0) aug1 \u0026lt;- augment(ols1) glimpse(aug1) ## Observations: 100 ## Variables: 9 ## $ y \u0026lt;dbl\u0026gt; 5.00000000, 4.00000000, -0.16783167, -0.29164105, -0.… ## $ x \u0026lt;dbl\u0026gt; -1.8439208, -1.7071418, -1.5996509, -1.4601550, -1.39… ## $ .fitted \u0026lt;dbl\u0026gt; -0.155937416, -0.135213012, -0.118926273, -0.09779020… ## $ .se.fit \u0026lt;dbl\u0026gt; 0.2581834, 0.2427649, 0.2308204, 0.2155907, 0.2086463… ## $ .resid \u0026lt;dbl\u0026gt; 5.15593742, 4.13521301, -0.04890540, -0.19385084, -0.… ## $ .hat \u0026lt;dbl\u0026gt; 0.05521164, 0.04881414, 0.04412882, 0.03849763, 0.036… ## $ .sigma \u0026lt;dbl\u0026gt; 0.964211, 1.017075, 1.104423, 1.104253, 1.102081, 1.1… ## $ .cooksd \u0026lt;dbl\u0026gt; 6.809587e-01, 3.820802e-01, 4.783890e-05, 6.480561e-0… ## $ .std.resid \u0026lt;dbl\u0026gt; 4.82755612, 3.85879897, -0.04552439, -0.17992001, -0.… Here we can compare the observations with Cook’s distance, \\(D_i\\) (i.e., .cooksd). Cook’s \\(D_i\\) is a measure of the influence of a given observation on the model. To compute \\(D_i\\), the model is fit once for each \\(n\\) case, after first dropping that case. Then the difference in the model with all observations and the model with all observations but the \\(i\\)th observation, as defined by the Euclidian distance between the estimators. Fahrmeir et al (2013, p. 166) suggest that within the OLS framework “as a rule of thumb, observations with \\(D_i\\) \u0026gt; 0.5 are worthy of attention, and observations with \\(D_i\\) \u0026gt; 1 should always be examined.” Here we plot \\(D_i\\) against our observation index, \\(i\\), for both models.\naug0 %\u0026gt;% # The well-behaived data mutate(i = 1:n()) %\u0026gt;% bind_rows( # The data with two outliers aug1 %\u0026gt;% mutate(i = 1:n()) ) %\u0026gt;% mutate(fit = rep(c(\u0026quot;fit b0\u0026quot;, \u0026quot;fit b1\u0026quot;), each = n()/2)) %\u0026gt;% ggplot(aes(x = i, y = .cooksd)) + geom_hline(yintercept = .5, color = \u0026quot;white\u0026quot;) + geom_point(alpha = .5) + geom_text(data = tibble(i = 46, .cooksd = .53, fit = \u0026quot;fit b0\u0026quot;), label = \u0026quot;Fahrmeir et al said we might worry around here\u0026quot;, color = \u0026quot;grey50\u0026quot;) + coord_cartesian(ylim = c(0, .7)) + theme(panel.grid = element_blank(), axis.title.x = element_text(face = \u0026quot;italic\u0026quot;, family = \u0026quot;Times\u0026quot;)) + facet_wrap(~fit) For the model of the well-behaved data, ols0, we have \\(D_i\\) values all hovering near zero. However, the plot for ols1 shows one \\(D_i\\) value well above the 0.5 level and another not quite that high but deviant relative to the rest. Our two outlier values look quite influential for the results of ols1.\n Switch to a Bayesian framework In this project, we’ll use the brms package to fit our Bayesian regression models. You can learn a lot about brms here and here. Bayesian models, of course, require us to use priors. To keep things simple, we’ll use weakly-regularizing priors.\nlibrary(brms) Stick with Gauss. For our first two Bayesian models, b0 and b1, we’ll use the conventional Gaussian likelihood (i.e., family = gaussian in the brm() function). Like with ols0, above, the first model is based on the nice d data. The second, b1, is based on the more-difficult o data.\nb0 \u0026lt;- brm(data = d, family = gaussian, y ~ 1 + x, prior = c(prior(normal(0, 10), class = Intercept), prior(normal(0, 10), class = b), prior(cauchy(0, 1), class = sigma)), seed = 1) b1 \u0026lt;- update(b0, newdata = o) Here are the model summaries.\ntidy(b0) %\u0026gt;% slice(1:3) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## term estimate std.error lower upper ## 1 b_Intercept -0.01 0.09 -0.15 0.13 ## 2 b_x 0.44 0.10 0.29 0.61 ## 3 sigma 0.87 0.07 0.77 0.98 tidy(b1) %\u0026gt;% slice(1:3) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## term estimate std.error lower upper ## 1 b_Intercept 0.12 0.11 -0.05 0.30 ## 2 b_x 0.15 0.13 -0.05 0.36 ## 3 sigma 1.10 0.08 0.99 1.24 These should look familiar. They’re very much like the results from the OLS models. Hopefully this isn’t surprising. Our priors were quite weak, so there’s no reason to suspect the results would differ much.\nThe LOO and other goodies help with diagnostics. With the loo() function, we’ll extract loo objects, which contain some handy output.\nloo_b0 \u0026lt;- loo(b0) loo_b1 \u0026lt;- loo(b1) ## Warning: Found 1 observations with a pareto_k \u0026gt; 0.7 in model \u0026#39;b1\u0026#39;. It is ## recommended to set \u0026#39;reloo = TRUE\u0026#39; in order to calculate the ELPD without ## the assumption that these observations are negligible. This will refit ## the model 1 times to compute the ELPDs for the problematic observations ## directly. We’ll use str() to get a sense of what’s all in there, using loo_b1 as an example.\nstr(loo_b1) ## List of 11 ## $ estimates : num [1:3, 1:2] -155.63 6.64 311.26 15.54 3.91 ... ## ..- attr(*, \u0026quot;dimnames\u0026quot;)=List of 2 ## .. ..$ : chr [1:3] \u0026quot;elpd_loo\u0026quot; \u0026quot;p_loo\u0026quot; \u0026quot;looic\u0026quot; ## .. ..$ : chr [1:2] \u0026quot;Estimate\u0026quot; \u0026quot;SE\u0026quot; ## $ pointwise : num [1:100, 1:4] -14.29 -9.09 -1.04 -1.05 -1.24 ... ## ..- attr(*, \u0026quot;dimnames\u0026quot;)=List of 2 ## .. ..$ : NULL ## .. ..$ : chr [1:4] \u0026quot;elpd_loo\u0026quot; \u0026quot;mcse_elpd_loo\u0026quot; \u0026quot;p_loo\u0026quot; \u0026quot;looic\u0026quot; ## $ diagnostics:List of 2 ## ..$ pareto_k: num [1:100] 0.8286 0.5899 -0.0669 -0.1036 -0.1012 ... ## ..$ n_eff : num [1:100] 40.5 348 3976.3 3973.3 3927.6 ... ## $ psis_object: NULL ## $ elpd_loo : num -156 ## $ p_loo : num 6.64 ## $ looic : num 311 ## $ se_elpd_loo: num 15.5 ## $ se_p_loo : num 3.91 ## $ se_looic : num 31.1 ## $ model_name : chr \u0026quot;b1\u0026quot; ## - attr(*, \u0026quot;dims\u0026quot;)= int [1:2] 4000 100 ## - attr(*, \u0026quot;class\u0026quot;)= chr [1:3] \u0026quot;ic\u0026quot; \u0026quot;psis_loo\u0026quot; \u0026quot;loo\u0026quot; ## - attr(*, \u0026quot;yhash\u0026quot;)= chr \u0026quot;5cdc17bb2cb41f3e3f0a617f418fff3fbb8e1ebf\u0026quot; For a detailed explanation of all those elements, see the reference manual. For our purposes, we’ll focus on the pareto_k. Here’s a glimpse of what it contains for the b1 model.\nloo_b1$diagnostics$pareto_k %\u0026gt;% as_tibble() ## Warning: Calling `as_tibble()` on a vector is discouraged, because the behavior is likely to change in the future. Use `enframe(name = NULL)` instead. ## This warning is displayed once per session. ## # A tibble: 100 x 1 ## value ## \u0026lt;dbl\u0026gt; ## 1 0.829 ## 2 0.590 ## 3 -0.0669 ## 4 -0.104 ## 5 -0.101 ## 6 -0.0321 ## 7 0.0498 ## 8 -0.114 ## 9 0.179 ## 10 -0.0736 ## # … with 90 more rows We’ve got us a numeric vector of as many values as our data had observations–100 in this case. The pareto_k values can be used to examine overly-influential cases. See, for example this discussion on stackoverflow.com in which several members of the Stan team weighed in. The issue is also discussed in this paper, in the loo reference manual, and in this presentation by Aki Vehtari. If we explicitly open the loo package, we can use a few convenience functions to leverage pareto_k for diagnostic purposes. The pareto_k_table() function will categorize the pareto_k values and give us a sense of how many values are in problematic ranges.\nlibrary(loo) pareto_k_table(loo_b1) ## Pareto k diagnostic values: ## Count Pct. Min. n_eff ## (-Inf, 0.5] (good) 98 98.0% 3563 ## (0.5, 0.7] (ok) 1 1.0% 348 ## (0.7, 1] (bad) 1 1.0% 41 ## (1, Inf) (very bad) 0 0.0% \u0026lt;NA\u0026gt; Happily, most of our cases were in the “good” range. One pesky case was in the “bad” range [can you guess which one?] and another case was only “ok” [and can you guess that one, too?]. The pareto_k_ids() function will tell exactly us which cases we’ll want to look at.\npareto_k_ids(loo_b1) ## [1] 1 2 Those numbers correspond to the row numbers in the data, o. These are exactly the cases that plagued our second OLS model, fit1, and are also the ones we hand coded to be outliers.\nWith the simple plot() function, we can get a diagnostic plot for the pareto_k values.\nplot(loo_b1) There they are, cases 1 and 2, lurking in the “bad” and “[just] ok” ranges. We can also make a similar plot with ggplot2. Though it takes a little more work, ggplot2 makes it easy to compare pareto_k plots across models with a little faceting.\nloo_b0$diagnostics$pareto_k %\u0026gt;% # The well-behaived data as_tibble() %\u0026gt;% mutate(i = 1:n()) %\u0026gt;% bind_rows( # The data with two outliers loo_b1$diagnostics$pareto_k %\u0026gt;% as_tibble() %\u0026gt;% mutate(i = 1:n()) ) %\u0026gt;% rename(pareto_k = value) %\u0026gt;% mutate(fit = rep(c(\u0026quot;fit b0\u0026quot;, \u0026quot;fit b1\u0026quot;), each = n()/2)) %\u0026gt;% ggplot(aes(x = i, y = pareto_k)) + geom_hline(yintercept = c(.5, .7, 1), color = \u0026quot;white\u0026quot;) + geom_point(alpha = .5) + geom_text(data = tibble(i = c(3, 6, 2), pareto_k = c(.45, .65, .95), label = c(\u0026quot;good\u0026quot;, \u0026quot;[just] ok\u0026quot;, \u0026quot;bad\u0026quot;), fit = \u0026quot;fit b0\u0026quot;), aes(label = label), color = \u0026quot;grey50\u0026quot;) + theme(panel.grid = element_blank(), axis.title.x = element_text(face = \u0026quot;italic\u0026quot;, family = \u0026quot;Times\u0026quot;)) + facet_wrap(~fit) So with b0–the model based on the well-behaved multivariate normal data, d–, all the pareto_k values hovered around zero in the “good” range. Things got concerning with model b1. But we know all that. Let’s move forward.\n What do we do with those overly-influential outlying values? A typical way to handle outlying values is to delete them based on some criterion, such as the Mahalanobis distance, Cook’s \\(D_i\\), or our new friend the pareto_k. In our next two models, we’ll do that. In our data arguments, we can use the slice() function to omit cases. In model b1.1, we simply omit the first and most influential case. In model b1.2, we omitted both unduly-influential cases, the values from rows 1 and 2.\nb1.1 \u0026lt;- update(b1, newdata = o %\u0026gt;% slice(2:100)) b1.2 \u0026lt;- update(b1, newdata = o %\u0026gt;% slice(3:100)) Here are the summaries for our models based on the slice[d] data.\ntidy(b1.1) %\u0026gt;% slice(1:3) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## term estimate std.error lower upper ## 1 b_Intercept 0.07 0.10 -0.09 0.23 ## 2 b_x 0.28 0.12 0.09 0.47 ## 3 sigma 0.97 0.07 0.87 1.09 tidy(b1.2) %\u0026gt;% slice(1:3) %\u0026gt;% mutate_if(is.double, round, digits = 2) ## term estimate std.error lower upper ## 1 b_Intercept 0.02 0.09 -0.12 0.16 ## 2 b_x 0.40 0.10 0.23 0.56 ## 3 sigma 0.86 0.06 0.76 0.97 They are closer to the true data generating model (i.e., the code we used to make d), especially b1.2. However, there are other ways to handle the influential cases without dropping them. Finally, we’re ready to switch to Student’s \\(t\\)!\n  Time to leave Gauss for the more general Student’s \\(t\\) Recall that the normal distribution is equivalent to a Student’s \\(t\\) with the degrees of freedom parameter, \\(\\nu\\), set to infinity. That is, \\(\\nu\\) is fixed. Here we’ll relax that assumption and estimate \\(\\nu\\) from the data just like we estimate \\(\\mu\\) with the linear model and \\(\\sigma\\) as the residual spread. Since \\(\\nu\\)’s now a parameter, we’ll have to give it a prior. For our first Student’s \\(t\\) model, we’ll estimate \\(\\nu\\) with the brms default gamma(2, 0.1) prior.\nb2 \u0026lt;- brm(data = o, family = student, y ~ 1 + x, prior = c(prior(normal(0, 10), class = Intercept), prior(normal(0, 10), class = b), prior(gamma(2, 0.1), class = nu), prior(cauchy(0, 1), class = sigma)), seed = 1) For the next model, we’ll switch out that weak gamma(2, 0.1) for a stronger gamma(4, 1). In some disciplines, the gamma distribution is something of an exotic bird. So before fitting the model, it might be useful to take a peek at what these gamma priors looks like. In the plot, below, the orange density in the background is the default gamma(2, 0.1) and the purple density in the foreground is the stronger gamma(4, 1).\n# data tibble(x = seq(from = 0, to = 60, by = .1)) %\u0026gt;% expand(x, nesting(alpha = c(2, 4), beta = c(0.1, 1))) %\u0026gt;% mutate(density = dgamma(x, alpha, beta), group = rep(letters[1:2], times = n() / 2)) %\u0026gt;% # plot ggplot(aes(x = x, ymin = 0, ymax = density, group = group, fill = group)) + geom_ribbon(size = 0, alpha = 3/4) + scale_fill_viridis_d(option = \u0026quot;B\u0026quot;, direction = -1, begin = 1/3, end = 2/3) + scale_y_continuous(NULL, breaks = NULL) + coord_cartesian(xlim = 0:50) + theme(panel.grid = element_blank(), legend.position = \u0026quot;none\u0026quot;) So the default prior is centered around values in the 2 to 30 range, but has a long gentle-sloping tail, allowing the model to yield much larger values for \\(\\nu\\), as needed. The prior we use below is almost entirely concentrated in the single-digit range. In this case, that will preference Student’s \\(t\\) likelihoods with very small \\(\\nu\\) parameters and correspondingly thick tails–easily allowing for extreme values.\nb3 \u0026lt;- update(b2, prior = c(prior(normal(0, 10), class = Intercept), prior(normal(0, 10), class = b), prior(gamma(4, 1), class = nu), prior(cauchy(0, 1), class = sigma)), seed = 1) For our final model, we’ll fix the \\(\\nu\\) parameter in a bf() statement.\nb4 \u0026lt;- brm(data = o, family = student, bf(y ~ 1 + x, nu = 4), prior = c(prior(normal(0, 100), class = Intercept), prior(normal(0, 10), class = b), prior(cauchy(0, 1), class = sigma)), seed = 1) Now we’ve got all those models, we can gather their results into a sole tibble.\nb_estimates \u0026lt;- tibble(model = c(\u0026quot;b0\u0026quot;, \u0026quot;b1\u0026quot;, \u0026quot;b1.1\u0026quot;, \u0026quot;b1.2\u0026quot;, \u0026quot;b2\u0026quot;, \u0026quot;b3\u0026quot;, \u0026quot;b4\u0026quot;)) %\u0026gt;% mutate(fit = map(model, get)) %\u0026gt;% mutate(tidy = map(fit, tidy)) %\u0026gt;% unnest(tidy) %\u0026gt;% filter(term %in% c(\u0026quot;b_Intercept\u0026quot;, \u0026quot;b_x\u0026quot;)) %\u0026gt;% arrange(term) To get a sense of what we’ve done, let’s take a peek at our models tibble.\nb_estimates %\u0026gt;% mutate_if(is.double, round, digits = 2) # This is just to round the numbers ## # A tibble: 14 x 6 ## model term estimate std.error lower upper ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 b0 b_Intercept -0.01 0.09 -0.15 0.13 ## 2 b1 b_Intercept 0.12 0.11 -0.05 0.3 ## 3 b1.1 b_Intercept 0.07 0.1 -0.09 0.23 ## 4 b1.2 b_Intercept 0.02 0.09 -0.12 0.16 ## 5 b2 b_Intercept 0.04 0.09 -0.11 0.2 ## 6 b3 b_Intercept 0.04 0.09 -0.11 0.19 ## 7 b4 b_Intercept 0.04 0.09 -0.11 0.19 ## 8 b0 b_x 0.44 0.1 0.290 0.61 ## 9 b1 b_x 0.15 0.13 -0.05 0.36 ## 10 b1.1 b_x 0.28 0.12 0.09 0.47 ## 11 b1.2 b_x 0.4 0.1 0.23 0.56 ## 12 b2 b_x 0.35 0.11 0.17 0.53 ## 13 b3 b_x 0.36 0.1 0.19 0.53 ## 14 b4 b_x 0.37 0.1 0.2 0.54 The models differ by their intercepts, slopes, sigmas, and \\(\\nu\\)s. For the sake of this post, we’ll focus on the slopes. Here we compare the different Bayesian models’ slopes by their posterior means and 95% intervals in a coefficient plot.\nb_estimates %\u0026gt;% filter(term == \u0026quot;b_x\u0026quot;) %\u0026gt;% # b_Intercept b_x ggplot(aes(x = model)) + geom_pointrange(aes(y = estimate, ymin = lower, ymax = upper), shape = 20) + coord_flip(ylim = c(-.2, 1)) + labs(title = \u0026quot;The x slope, varying by model\u0026quot;, subtitle = \u0026quot;The dots are the posterior means and the lines the percentile-based 95% intervals.\u0026quot;, x = NULL, y = NULL) + theme(panel.grid = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_text(hjust = 0)) You might think of the b0 slope as the “true” slope. That’s the one estimated from the well-behaved multivariate normal data, d. That estimate’s just where we’d want it to be. The b1 slope is a disaster–way lower than the others. The slopes for b1.1 and b1.2 get better, but at the expense of deleting data. All three of our Student’s \\(t\\) models produced slopes that were pretty close to the b0 slope. They weren’t perfect, but, all in all, Student’s \\(t\\)-distribution did pretty okay.\n We need more LOO and more pareto_k. We already have loo objects for our first two models, b0 and b1. Let’s get some for models b2 through b4.\nloo_b2 \u0026lt;- loo(b2) loo_b3 \u0026lt;- loo(b3) loo_b4 \u0026lt;- loo(b4) With a little data wrangling, we can compare our models by how they look in our custom pareto_k diagnostic plots.\n# make a custom function to work with the loo objects in bulk get_pareto_k \u0026lt;- function(l) { l$diagnostics$pareto_k %\u0026gt;% as_tibble() %\u0026gt;% mutate(i = 1:n()) %\u0026gt;% rename(pareto_k = value) } # wrangle tibble(name = str_c(\u0026quot;loo_b\u0026quot;, 1:4)) %\u0026gt;% mutate(loo_object = map(name, get)) %\u0026gt;% mutate(pareto_k = map(loo_object, get_pareto_k)) %\u0026gt;% unnest(pareto_k) %\u0026gt;% mutate(fit = rep(c(\u0026quot;fit b1\u0026quot;, \u0026quot;fit b2\u0026quot;, \u0026quot;fit b3\u0026quot;, \u0026quot;fit b4\u0026quot;), each = n() / 4)) %\u0026gt;% # plot ggplot(aes(x = i, y = pareto_k)) + geom_hline(yintercept = c(.5, .7), color = \u0026quot;white\u0026quot;) + geom_point(alpha = .5) + scale_y_continuous(breaks = c(0, .5, .7)) + theme(panel.grid = element_blank(), axis.title.x = element_text(face = \u0026quot;italic\u0026quot;, family = \u0026quot;Times\u0026quot;)) + facet_wrap(~fit) Oh man, those Student’s \\(t\\) models worked sweet! In a succession from b2 through b4, each model looked better by pareto_k. All were way better than the typical Gaussian model, b1. While we’re at it, we might compare those by their LOO values.\ncompare_ic(loo_b1, loo_b2, loo_b3, loo_b4) ## LOOIC SE ## b1 311.26 31.09 ## b2 289.97 23.07 ## b3 287.64 20.83 ## b4 285.95 20.19 ## b1 - b2 21.29 11.68 ## b1 - b3 23.62 14.58 ## b1 - b4 25.31 15.46 ## b2 - b3 2.33 3.03 ## b2 - b4 4.02 3.95 ## b3 - b4 1.69 0.92 In terms of the LOO, b2 through b4 were about the same, but all looked better than b1. In fairness, though, the standard errors for the difference scores were a bit on the wide side. If you’re new to using information criteria to compare models, you might sit down and soak in this lecture on the topic and this vignette on the LOO in particular. For a more technical introduction, you might check out the references in the loo package’s reference manual.\nFor one final LOO-related comparison, we can use the brms::model_weights() function to see how much relative weight we might put on each of those four models if we were to use a model averaging approach. Here we use the default method, which is model averaging via posterior predictive stacking.\nmodel_weights(b1, b2, b3, b4) ## b1 b2 b3 b4 ## 6.956356e-07 4.480928e-09 4.036950e-06 9.999953e-01 If you’re not a fan of scientific notation, just tack on round(digits = 2). The stacking method suggests that we should place virtually all the weight on b4, the model in which we fixed our Student-\\(t\\) \\(\\nu\\) parameter at 4. To learn more about model stacking, check out Yao, Vehtari, Simpson, and Gelman’s (2018) paper, Using stacking to average Bayesian predictive distributions.\n Let’s compare a few Bayesian models. That’s enough with coefficients, pareto_k, and the LOO. Let’s get a sense of the implications of the models by comparing a few in plots. Here we use convenience functions from Matthew Kay’s tidybayes package to streamline the data wrangling and plotting. [The method came from a kind twitter suggesion from Kay.]\nlibrary(tidybayes) # These are the values of x we\u0026#39;d like model-implied summaries for nd \u0026lt;- tibble(x = seq(from = -4, to = 4, length.out = 50)) # here\u0026#39;s another way to arrange the models list(b0 = b0, b1 = b1, b3 = b3) %\u0026gt;% # with help from 1tidybayes::add_fitted_draws()`, here we use `fitted()` in bulk map_dfr(add_fitted_draws, newdata = nd, .id = \u0026quot;model\u0026quot;) %\u0026gt;% # plot ggplot(aes(x = x)) + stat_lineribbon(aes(y = .value), .width = .95, color = \u0026quot;grey92\u0026quot;, fill = \u0026quot;grey67\u0026quot;) + geom_point(data = d %\u0026gt;% bind_rows(o, o) %\u0026gt;% mutate(model = rep(c(\u0026quot;b0\u0026quot;, \u0026quot;b1\u0026quot;, \u0026quot;b3\u0026quot;), each = 100)), aes(y = y, color = y \u0026gt; 3), size = 1, alpha = 3/4) + scale_color_viridis_d(option = \u0026quot;A\u0026quot;, end = 4/7) + coord_cartesian(xlim = -3:3, ylim = -3:5) + ylab(NULL) + theme(panel.grid = element_blank(), legend.position = \u0026quot;none\u0026quot;) + facet_wrap(~model) For each subplot, the gray band is the 95% interval band and the overlapping light gray line is the posterior mean. Model b0, recall, is our baseline comparison model. This is of the well-behaved no-outlier data, d, using the good old Gaussian likelihood. Model b1 is of the outlier data, o, but still using the non-robust Gaussian likelihood. Model b3 uses a robust Student’s \\(t\\) likelihood with \\(\\nu\\) estimated with the fairly narrow gamma(4, 1) prior. For my money, b3 did a pretty good job.\nsessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tidybayes_1.0.3 loo_2.0.0 brms_2.7.0 Rcpp_1.0.0 ## [5] gridExtra_2.3 broom_0.5.1 bindrcpp_0.2.2 forcats_0.3.0 ## [9] stringr_1.3.1 dplyr_0.7.6 purrr_0.2.5 readr_1.1.1 ## [13] tidyr_0.8.1 tibble_2.0.1 ggplot2_3.1.0 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] colorspace_1.3-2 ggridges_0.5.0 ## [3] rsconnect_0.8.8 rprojroot_1.3-2 ## [5] ggstance_0.3 markdown_0.8 ## [7] base64enc_0.1-3 rstudioapi_0.7 ## [9] rstan_2.18.2 svUnit_0.7-12 ## [11] DT_0.4 fansi_0.4.0 ## [13] mvtnorm_1.0-8 lubridate_1.7.4 ## [15] xml2_1.2.0 bridgesampling_0.4-0 ## [17] knitr_1.20 shinythemes_1.1.1 ## [19] bayesplot_1.6.0 jsonlite_1.5 ## [21] shiny_1.1.0 compiler_3.5.1 ## [23] httr_1.3.1 backports_1.1.2 ## [25] assertthat_0.2.0 Matrix_1.2-14 ## [27] lazyeval_0.2.1 cli_1.0.1 ## [29] later_0.7.3 htmltools_0.3.6 ## [31] prettyunits_1.0.2 tools_3.5.1 ## [33] igraph_1.2.1 coda_0.19-2 ## [35] gtable_0.2.0 glue_1.3.0 ## [37] reshape2_1.4.3 cellranger_1.1.0 ## [39] nlme_3.1-137 blogdown_0.8 ## [41] crosstalk_1.0.0 xfun_0.3 ## [43] ps_1.2.1 rvest_0.3.2 ## [45] mime_0.5 miniUI_0.1.1.1 ## [47] gtools_3.8.1 MASS_7.3-50 ## [49] zoo_1.8-2 scales_1.0.0 ## [51] colourpicker_1.0 hms_0.4.2 ## [53] promises_1.0.1 Brobdingnag_1.2-5 ## [55] parallel_3.5.1 inline_0.3.15 ## [57] shinystan_2.5.0 yaml_2.1.19 ## [59] StanHeaders_2.18.0-1 stringi_1.2.3 ## [61] highr_0.7 dygraphs_1.1.1.5 ## [63] pkgbuild_1.0.2 rlang_0.3.1 ## [65] pkgconfig_2.0.2 matrixStats_0.54.0 ## [67] evaluate_0.10.1 lattice_0.20-35 ## [69] bindr_0.1.1 rstantools_1.5.0 ## [71] htmlwidgets_1.2 labeling_0.3 ## [73] tidyselect_0.2.4 processx_3.2.1 ## [75] plyr_1.8.4 magrittr_1.5 ## [77] bookdown_0.7 R6_2.3.0 ## [79] generics_0.0.2 pillar_1.3.1 ## [81] haven_1.1.2 withr_2.1.2 ## [83] xts_0.10-2 abind_1.4-5 ## [85] modelr_0.1.2 crayon_1.3.4 ## [87] arrayhelpers_1.0-20160527 utf8_1.1.4 ## [89] rmarkdown_1.10 grid_3.5.1 ## [91] readxl_1.1.0 callr_3.1.0 ## [93] threejs_0.3.1 digest_0.6.18 ## [95] xtable_1.8-2 httpuv_1.4.4.2 ## [97] stats4_3.5.1 munsell_0.5.0 ## [99] viridisLite_0.3.0 shinyjs_1.0   ","date":1549065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549065600,"objectID":"356c8f89f51fbdda00a2925cf4ffac4a","permalink":"/post/robust-linear-regression-with-the-robust-student-s-t-distribution/","publishdate":"2019-02-02T00:00:00Z","relpermalink":"/post/robust-linear-regression-with-the-robust-student-s-t-distribution/","section":"post","summary":"[edited Feb 3, 2018]\nThe purpose of this post is to demonstrate the advantages of the Student’s \\(t\\)-distribution for regression with outliers, particularly within a Bayesian framework.\nI make assumptions I’m presuming you are familiar with linear regression, familiar with the basic differences between frequentist and Bayesian approaches to fitting regression models, and have a sense that the issue of outlier values is a pickle worth contending with. All code in is R, with a heavy use of the tidyverse–which you might learn a lot about here, especially chapter 5– and Paul Bürkner’s brms package.","tags":["R","Bayesian","brms","outlier","robust","tutorial"],"title":"Robust Linear Regression with Student’s $t$-Distribution","type":"post"},{"authors":null,"categories":[],"content":"[edited Dec 23, 2018]\ntl;dr You too can make sideways Gaussian density curves within the tidyverse. Here’s how.\n Here’s the deal: I like making pictures. Over the past several months, I’ve been slowly chipping away at John Kruschke’s Doing Bayesian data analysis, Second Edition: A tutorial with R, JAGS, and Stan. Kruschke has a unique plotting style. One of the quirks is once in a while he likes to express the results of his analyses in plots where he shows the data alongside density curves of the model-implied data-generating distributions. Here’s an example from chapter 19 (p. 563).\n In this example, he has lifespan data (i.e., Longevity) for fruit flies from five experimental conditions (i.e., CompanionNumber). Those are the black circles. In this section of the chapter, he used a Gaussian multilevel model in which the mean value for Longevity had a grand mean in addition to random effects for the five experimental conditions. Those sideways-turned blue Gaussians are his attempt to express the model-implied data generating distributions for each group.\nIf you haven’t gone through Kruschke’s text, you should know he relies on base R and all its loopy glory. If you carefully go through his code, you can reproduce his plots in that fashion. I’m a tidyverse man and prefer to avoid writing a for() loop at all costs. At first, I tried to work with convenience functions within ggplot2 and friends, but only had limited success. After staring long and hard at Kruschke’s base code, I came up with a robust solution, which I’d like to share here.\nIn this post, we’ll practice making sideways Gaussians in the Kruschke style. We’ll do so with a simple intercept-only single-level model and then expand our approach to an intercept-only multilevel model like the one in the picture, above.\n My assumptions For the sake of this post, I’m presuming you’re familiar with R, aware of the tidyverse, and have fit a Bayesian model or two. Yes. I admit that’s a narrow crowd. Sometimes the target’s a small one.\n We need data. First, we need data. Here we’ll borrow code from Matthew Kay’s nice tutorial on how to use his great tidybayes package.\nlibrary(tidyverse) set.seed(5) n \u0026lt;- 10 n_condition \u0026lt;- 5 abc \u0026lt;- tibble(condition = rep(letters[1:5], times = n), response = rnorm(n * 5, mean = c(0, 1, 2, 1, -1), sd = 0.5)) The data structure looks like so.\nstr(abc) ## Classes \u0026#39;tbl_df\u0026#39;, \u0026#39;tbl\u0026#39; and \u0026#39;data.frame\u0026#39;: 50 obs. of 2 variables: ## $ condition: chr \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot; \u0026quot;d\u0026quot; ... ## $ response : num -0.42 1.692 1.372 1.035 -0.144 ... With Kay’s code, we have response values for five conditions. All follow the normal distribution and share a common standard deviation. However, they differ in their group means.\nabc %\u0026gt;% group_by(condition) %\u0026gt;% summarise(mean = mean(response) %\u0026gt;% round(digits = 2)) ## # A tibble: 5 x 2 ## condition mean ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 a 0.18 ## 2 b 1.01 ## 3 c 1.87 ## 4 d 1.03 ## 5 e -0.94 Altogether, the data look like this.\ntheme_set(theme_grey() + theme(panel.grid = element_blank())) abc %\u0026gt;% ggplot(aes(y = condition, x = response)) + geom_point(shape = 1) Let’s get ready to model.\n Just one intercept If you’ve read this far, you know we’re going Bayesian. Let’s open up our favorite Bayesian modeling package, Bürkner’s brms.\nlibrary(brms) For our first model, we’ll ignore the groups and just estimate a grand mean and a standard deviation. Relative to the scale of the abc data, our priors are modestly regularizing.\nfit1 \u0026lt;- brm(data = abc, response ~ 1, prior = c(prior(normal(0, 1), class = Intercept), prior(student_t(3, 0, 1), class = sigma))) Extract the posterior draws and save them as a data frame we’ll call post.\npost \u0026lt;- posterior_samples(fit1) glimpse(post) ## Observations: 4,000 ## Variables: 3 ## $ b_Intercept \u0026lt;dbl\u0026gt; 0.5987480, 0.5987480, 0.7314609, 0.6445826, 0.5576265, 0.7100258, 0.5000373, … ## $ sigma \u0026lt;dbl\u0026gt; 1.1177155, 1.1177155, 1.0092032, 1.0192299, 1.1700033, 1.0615338, 1.0849874, … ## $ lp__ \u0026lt;dbl\u0026gt; -76.96158, -76.96158, -77.46269, -77.09759, -77.26516, -77.10602, -77.20185, … If all you want is a quick and dirty way to plot a few of the model-implied Gaussians from the simple model, you can just nest stat_function() within mapply() and tack on the original data in a geom_jitter().\n# How many Gaussians would you like? n_iter \u0026lt;- 20 tibble(response = c(-4, 4)) %\u0026gt;% ggplot(aes(x = response)) + mapply(function(mean, sd) { stat_function(fun = dnorm, args = list(mean = mean, sd = sd), alpha = 1/2, color = \u0026quot;steelblue\u0026quot;) }, # Enter means and standard deviations here mean = post[1:n_iter, \u0026quot;b_Intercept\u0026quot;], sd = post[1:n_iter, \u0026quot;sigma\u0026quot;] ) + geom_jitter(data = abc, aes(y = -0.02), height = .025, shape = 1, alpha = 2/3) + scale_y_continuous(NULL, breaks = NULL) This works pretty okay. But notice the orientation is the usual horizontal. Kruschke’s Gaussians were on their sides. If we switch out our scale_y_continuous() line with scale_y_reverse() and add in coord_flip(), we’ll have it.\ntibble(response = c(-4, 4)) %\u0026gt;% ggplot(aes(x = response)) + mapply(function(mean, sd) { stat_function(fun = dnorm, args = list(mean = mean, sd = sd), alpha = 1/2, color = \u0026quot;steelblue\u0026quot;) }, mean = post[1:n_iter, \u0026quot;b_Intercept\u0026quot;], sd = post[1:n_iter, \u0026quot;sigma\u0026quot;] ) + geom_jitter(data = abc, aes(y = -0.02), height = .025, shape = 1, alpha = 2/3) + scale_y_reverse(NULL, breaks = NULL) + coord_flip()  Boom. It won’t always be this easy, though.\n Multiple intercepts Since the response values are from a combination of five condition groups, we can fit a multilevel model to compute both the grand mean and the group-level deviations from the grand mean.\nfit2 \u0026lt;- brm(data = abc, response ~ 1 + (1 | condition), prior = c(prior(normal(0, 1), class = Intercept), prior(student_t(3, 0, 1), class = sigma), prior(student_t(3, 0, 1), class = sd)), cores = 4) “Wait. Whoa. I’m so confused”—you say. “What’s a multilevel model, again?” Read this book, or this book; start here on this lecture series; or even check out my project, starting with chapter 12.\nOnce again, extract the posterior draws and save them as a data frame, post.\npost \u0026lt;- posterior_samples(fit2) str(post) ## \u0026#39;data.frame\u0026#39;: 4000 obs. of 9 variables: ## $ b_Intercept : num 0.0379 0.102 -0.048 -1.0037 0.0231 ... ## $ sd_condition__Intercept : num 2.08 2.13 1.94 1.99 2.21 ... ## $ sigma : num 0.473 0.468 0.475 0.648 0.527 ... ## $ r_condition[a,Intercept]: num -0.01062 0.00219 0.23764 1.40189 0.08825 ... ## $ r_condition[b,Intercept]: num 0.877 0.911 0.781 1.944 1.233 ... ## $ r_condition[c,Intercept]: num 1.46 1.62 2.03 3.15 1.74 ... ## $ r_condition[d,Intercept]: num 0.995 1.096 1.014 2.217 0.876 ... ## $ r_condition[e,Intercept]: num -1.111 -1.144 -1.005 0.234 -0.906 ... ## $ lp__ : num -51.8 -49.2 -50 -53.5 -48.7 ... This is where our task becomes difficult. Now each level of condition has its own mean estimate, which is a combination of the grand mean b_Intercept and the group-specific deviation, r_condition[a,Intercept] through r_condition[e,Intercept]. If all we wanted to do was show the model-implied Gaussians for, say, condition == a, that’d be a small extension of our last approach.\ntibble(response = c(-4, 4)) %\u0026gt;% ggplot(aes(x = response)) + mapply(function(mean, sd) { stat_function(fun = dnorm, args = list(mean = mean, sd = sd), alpha = 1/2, color = \u0026quot;steelblue\u0026quot;) }, # Here\u0026#39;s the small extension, part a mean = post[1:n_iter, \u0026quot;b_Intercept\u0026quot;] + post[1:n_iter, \u0026quot;r_condition[a,Intercept]\u0026quot;], sd = post[1:n_iter, \u0026quot;sigma\u0026quot;] ) + # The small extension, part b: geom_jitter(data = abc %\u0026gt;% filter(condition == \u0026quot;a\u0026quot;), aes(y = 0), height = .025, shape = 1, alpha = 2/3) + scale_y_reverse(NULL, breaks = NULL) + coord_flip() + labs(subtitle = \u0026quot;This is just for condition a\u0026quot;) The main thing we did was add to the definition of the mean within mapply(): mean = post[1:n_iter, \u0026quot;b_Intercept\u0026quot;] + post[1:n_iter, \u0026quot;r_condition[a,Intercept]\u0026quot;]. Within geom_jitter(), we also isolated the condition == \u0026quot;a\u0026quot; cases with filter(). Simple. However, it’s more of a pickle if we want multiple densities stacked atop/next to one another within the same plot.\nUnfortunately, we can’t extend our mapply(stat_function()) method to the group-level estimates–at least not that I’m aware. But there are other ways. We’ll need a little help from tidybayes::spread_draws(), about which you can learn more here.\nlibrary(tidybayes) sd \u0026lt;- fit2 %\u0026gt;% spread_draws(b_Intercept, sigma, r_condition[condition,]) head(sd) ## # A tibble: 6 x 7 ## # Groups: condition [5] ## .chain .iteration .draw b_Intercept sigma condition r_condition ## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1 1 1 0.0379 0.473 a -0.0106 ## 2 1 1 1 0.0379 0.473 b 0.877 ## 3 1 1 1 0.0379 0.473 c 1.46 ## 4 1 1 1 0.0379 0.473 d 0.995 ## 5 1 1 1 0.0379 0.473 e -1.11 ## 6 1 2 2 0.102 0.468 a 0.00219 In our sp tibble, we have much of the same information we’d get from brms::posterior_samples(), but in the long format with respect to the random effects for condition. Also notice that each row is indexed by the chain, iteration, and draw number. Among those, .draw is the column that corresponds to a unique row like what we’d get from brms::posterior_samples(). This is the index that ranges from 1 to the number of chains multiplied by the number of post-warmup iterations (i.e., default 4000 in our case).\nBut we need to wrangle a bit. Within the expand() function, we’ll select the columns we’d like to keep within the nesting() function and then expand the tibble by adding a sequence of response values ranging from -4 to 4, for each. This sets us up to use the dnorm() function in the next line to compute the density for each of those response values based on 20 unique normal distributions for each of the five condition groups. “Why 20?” Because we need some reasonably small number and 20’s the one Kruschke tended to use in his text and because, well, we set filter(.draw \u0026lt; 21). But choose whatever number you like.\nThe difficulty, however, is that all of these densities will have a minimum value of around 0 and all will be on the same basic scale. So we need a way to serially shift the density values up the y-axis in such a way that they’ll be sensibly separated by group. As far as I can figure, this’ll take us a couple steps. For the first step, we’ll create an intermediary variable, g, with which we’ll arbitrarily assign each of our five groups an integer index ranging from 0 to 4.\nThe second step is tricky. There we use our g integers to sequentially shift the density values up. Since our g value for a == 0, those we’ll keep 0 as their baseline. As our g value for b == 1, the baseline for those will now increase by 1. And so on for the other groups. But we still need to do a little more fiddling. What we want is for the maximum values of the density estimates to be a little lower than the baselines of the ones one grouping variable up. That is, we want the maximum values for the a densities to fall a little bit below 1 on the y-axis. It’s with the * .75 / max(density) part of the code that we accomplish that task. If you want to experiment with more or less room between the top and bottom of each density, play around with increasing/decreasing that .75 value.\nsd \u0026lt;- sd %\u0026gt;% filter(.draw \u0026lt; 21) %\u0026gt;% expand(nesting(.draw, b_Intercept, sigma, condition, r_condition), response = seq(from = -4, to = 4, length.out = 200)) %\u0026gt;% mutate(density = dnorm(response, mean = b_Intercept + r_condition, sd = sigma), g = recode(condition, a = 0, b = 1, c = 2, d = 3, e = 4)) %\u0026gt;% mutate(density = g + density * .75 / max(density)) glimpse(sd) ## Observations: 20,000 ## Variables: 8 ## Groups: condition [5] ## $ .draw \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ b_Intercept \u0026lt;dbl\u0026gt; 0.03787325, 0.03787325, 0.03787325, 0.03787325, 0.03787325, 0.03787325, 0.037… ## $ sigma \u0026lt;dbl\u0026gt; 0.4734374, 0.4734374, 0.4734374, 0.4734374, 0.4734374, 0.4734374, 0.4734374, … ## $ condition \u0026lt;chr\u0026gt; \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a… ## $ r_condition \u0026lt;dbl\u0026gt; -0.0106207, -0.0106207, -0.0106207, -0.0106207, -0.0106207, -0.0106207, -0.01… ## $ response \u0026lt;dbl\u0026gt; -4.000000, -3.959799, -3.919598, -3.879397, -3.839196, -3.798995, -3.758794, … ## $ density \u0026lt;dbl\u0026gt; 1.435677e-16, 2.945670e-16, 6.000399e-16, 1.213514e-15, 2.436566e-15, 4.85713… ## $ g \u0026lt;dbl\u0026gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… Since we’ll now be using the same axis for both the densities and the five condition groups, we’ll need to add a density column to our abc data.\nabc \u0026lt;- abc %\u0026gt;% mutate(density = recode(condition, a = 0, b = 1, c = 2, d = 3, e = 4)) Time to plot.\nsd %\u0026gt;% ggplot(aes(x = response, y = density)) + # here we make our density lines geom_line(aes(group = interaction(.draw, g)), alpha = 1/2, size = 1/3, color = \u0026quot;steelblue\u0026quot;) + # use the original data for the jittered points geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + scale_y_continuous(\u0026quot;condition\u0026quot;, breaks = 0:4, labels = letters[1:5]) Now we’re rolling. Let’s make a cosmetic adjustment. Recall that the full range of the normal distribution spans from \\(-\\infty\\) to \\(\\infty\\). At a certain point, it’s just not informative to show the left and right tails. If you look back up at our motivating example, you’ll note Kruschke’s densities stopped well before trailing off into the tails. If you look closely to the code from his text, you’ll see he’s just showing the inner 95-percentile range for each. To follow suit, we can compute those ranges with qnorm().\nsd \u0026lt;- sd %\u0026gt;% mutate(ll = qnorm(.025, mean = b_Intercept + r_condition, sd = sigma), ul = qnorm(.975, mean = b_Intercept + r_condition, sd = sigma)) Now we have our lower- and upper-level points for each iteration, we can limit the ranges of our Gaussians with filter().\nsd %\u0026gt;% filter(response \u0026gt; ll, response \u0026lt; ul) %\u0026gt;% ggplot(aes(x = response, y = density)) + geom_line(aes(group = interaction(.draw, g)), alpha = 1/2, size = 1/3, color = \u0026quot;steelblue\u0026quot;) + geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + scale_y_continuous(\u0026quot;condition\u0026quot;, breaks = 0:4, labels = letters[1:5]) Oh man, just look how sweet that is. Although I prefer our current method, another difference between it and Kruschke’s example is all of his densities are the same relative height. In all our plots so far, though, the densities differ by their heights. We’ll need a slight adjustment in our sd workflow for that. All we need to do is insert a group_by() statement between the two mutate() lines.\nsd \u0026lt;- sd %\u0026gt;% mutate(density = dnorm(response, mean = b_Intercept + r_condition, sd = sigma), g = recode(condition, a = 0, b = 1, c = 2, d = 3, e = 4)) %\u0026gt;% # here\u0026#39;s the new line group_by(.draw) %\u0026gt;% mutate(density = g + density * .75 / max(density)) # now plot sd %\u0026gt;% filter(response \u0026gt; ll, response \u0026lt; ul) %\u0026gt;% ggplot(aes(x = response, y = density)) + geom_line(aes(group = interaction(.draw, g)), alpha = 1/2, size = 1/3, color = \u0026quot;steelblue\u0026quot;) + geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + scale_y_continuous(\u0026quot;condition\u0026quot;, breaks = 0:4, labels = letters[1:5]) Nice. “But wait!”, you say. “We wanted our Gaussians to be on their sides.” We can do that in at least two ways. At this point, the quickest way is to use our scale_y_reverse() + coord_flip() combo from before.\nsd %\u0026gt;% filter(response \u0026gt; ll, response \u0026lt; ul) %\u0026gt;% ggplot(aes(x = response, y = density)) + geom_line(aes(group = interaction(.draw, g)), alpha = 1/2, size = 1/3, color = \u0026quot;steelblue\u0026quot;) + geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + scale_y_reverse(\u0026quot;condition\u0026quot;, breaks = 0:4, labels = letters[1:5]) + coord_flip() Another way to get those sideways Gaussians is to alter our sd data workflow. The main differene is this time we change the original mutate(density = g + density * .75 / max(density)) line to mutate(density = g - density * .75 / max(density)). In case you missed it, the only difference is we changed the + to a -.\nsd \u0026lt;- sd %\u0026gt;% # step one: starting fresh mutate(density = dnorm(response, mean = b_Intercept + r_condition, sd = sigma)) %\u0026gt;% group_by(.draw) %\u0026gt;% # step two: now SUBTRACTING density from g within the equation mutate(density = g - density * .75 / max(density)) Now in our global aes() statement in the plot, we put density on the x and response on the y. We need to take a few other subtle steps:\n Switch out geom_line() for geom_path() (see here). Drop the height argument within geom_jitter() for width. Switch out scale_y_continuous() for scale_x_continuous().  Though totally not necessary, we’ll add a little something extra by coloring the Gaussians by their means.\nsd %\u0026gt;% filter(response \u0026gt; ll, response \u0026lt; ul) %\u0026gt;% ggplot(aes(x = density, y = response)) + geom_path(aes(group = interaction(.draw, g), color = b_Intercept + r_condition), alpha = 1/2, size = 1/3, show.legend = F) + geom_jitter(data = abc, width = .05, shape = 1, alpha = 2/3) + scale_x_continuous(\u0026quot;condition\u0026quot;, breaks = 0:4, labels = letters[1:5]) + scale_color_viridis_c(option = \u0026quot;A\u0026quot;, end = .92) There you have it–Kruschke-style sideways Gaussians for your model plots.\n Afterward After releasing the initial version of this post, some of us had a lively twitter discussion on how to improve the code.\nAh, hrm. Took some digging, but it looks like negative density + setting `min_height = NA` (otherwise negative values are cut off) might work pic.twitter.com/gmF9kpo2T7\n\u0026mdash; Matthew Kay (@mjskay) December 22, 2018  Part of that discussion had to do with the possibility of using functions from Claus Wilke’s great ggridges package. After some great efforts, especially from Matthew Kay, we came up with solutions. In this section, we’ll cover them in some detail.\nFirst, here’s a more compact way to prepare the data for the plot.\nabc %\u0026gt;% distinct(condition) %\u0026gt;% add_fitted_draws(fit2, n = 20, dpar = c(\u0026quot;mu\u0026quot;, \u0026quot;sigma\u0026quot;)) %\u0026gt;% mutate(lower = qnorm(.025, mean = mu, sd = sigma), upper = qnorm(.975, mean = mu, sd = sigma)) %\u0026gt;% mutate(response = map2(lower, upper, seq, length.out = 200)) %\u0026gt;% mutate(density = pmap(list(response, mu, sigma), dnorm)) %\u0026gt;% unnest() %\u0026gt;% group_by(.draw) %\u0026gt;% mutate(density = density * .75 / max(density)) %\u0026gt;% glimpse() ## Observations: 20,000 ## Variables: 12 ## Groups: .draw [20] ## $ condition \u0026lt;chr\u0026gt; \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;… ## $ .row \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ .chain \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw \u0026lt;int\u0026gt; 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24… ## $ .value \u0026lt;dbl\u0026gt; 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0… ## $ mu \u0026lt;dbl\u0026gt; 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0.2041854, 0… ## $ sigma \u0026lt;dbl\u0026gt; 0.5729852, 0.5729852, 0.5729852, 0.5729852, 0.5729852, 0.5729852, 0.5729852, 0… ## $ lower \u0026lt;dbl\u0026gt; -0.918845, -0.918845, -0.918845, -0.918845, -0.918845, -0.918845, -0.918845, -… ## $ upper \u0026lt;dbl\u0026gt; 1.327216, 1.327216, 1.327216, 1.327216, 1.327216, 1.327216, 1.327216, 1.327216… ## $ response \u0026lt;dbl\u0026gt; -0.9188450, -0.9075582, -0.8962715, -0.8849847, -0.8736980, -0.8624113, -0.851… ## $ density \u0026lt;dbl\u0026gt; 0.1098804, 0.1141834, 0.1186089, 0.1231581, 0.1278322, 0.1326322, 0.1375591, 0… This could use some walking out. With the first two lines, we made a \\(5 \\times 1\\) tibble containing the five levels of condition, a through f. The add_fitted_draws() function comes from tidybayes. The first argument took our brms model fit, fit2. With the n argument, we indicated we just wanted 20 draws. With dpar, we requested distributional regression parameters in the output. In our case, those were the \\(\\mu\\) and \\(\\sigma\\) values for each level of condition. Here’s what that looks like.\nabc %\u0026gt;% distinct(condition) %\u0026gt;% add_fitted_draws(fit2, n = 20, dpar = c(\u0026quot;mu\u0026quot;, \u0026quot;sigma\u0026quot;)) %\u0026gt;% head() ## # A tibble: 6 x 8 ## # Groups: condition, .row [1] ## condition .row .chain .iteration .draw .value mu sigma ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 a 1 NA NA 55 0.163 0.163 0.458 ## 2 a 1 NA NA 126 0.509 0.509 0.513 ## 3 a 1 NA NA 404 0.472 0.472 0.717 ## 4 a 1 NA NA 813 0.387 0.387 0.537 ## 5 a 1 NA NA 1111 0.154 0.154 0.515 ## 6 a 1 NA NA 1218 0.204 0.204 0.495 Next, we established the lower- and upper-bounds bounds for the density lines, which were 95% intervals in this example. Within the second mutate() function, we used the purrr::map2() function to feed those two values into the first two arguments of the seq() function. Those arguments, recall, are from and to. We then hard coded 200 into the length.out argument. As a result, we turned our regular old tibble into a nested tibble. In each row of our new response column, we now have a \\(200 \\times 1\\) data frame containing the seq() output. If you’re new to nested data structures, I recommend checking out Hadley Wickham’s Managing many models with R.\nabc %\u0026gt;% distinct(condition) %\u0026gt;% add_fitted_draws(fit2, n = 20, dpar = c(\u0026quot;mu\u0026quot;, \u0026quot;sigma\u0026quot;)) %\u0026gt;% mutate(lower = qnorm(.025, mean = mu, sd = sigma), upper = qnorm(.975, mean = mu, sd = sigma)) %\u0026gt;% mutate(response = map2(lower, upper, seq, length.out = 200)) %\u0026gt;% head() ## # A tibble: 6 x 11 ## # Groups: condition, .row [1] ## condition .row .chain .iteration .draw .value mu sigma lower upper response ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;list\u0026gt; ## 1 a 1 NA NA 346 0.278 0.278 0.521 -0.743 1.30 \u0026lt;dbl [200]\u0026gt; ## 2 a 1 NA NA 696 0.193 0.193 0.498 -0.783 1.17 \u0026lt;dbl [200]\u0026gt; ## 3 a 1 NA NA 734 0.320 0.320 0.709 -1.07 1.71 \u0026lt;dbl [200]\u0026gt; ## 4 a 1 NA NA 1214 0.0686 0.0686 0.559 -1.03 1.16 \u0026lt;dbl [200]\u0026gt; ## 5 a 1 NA NA 1313 0.229 0.229 0.539 -0.828 1.29 \u0026lt;dbl [200]\u0026gt; ## 6 a 1 NA NA 1348 0.329 0.329 0.589 -0.826 1.48 \u0026lt;dbl [200]\u0026gt; Much as the purrr::map2() function allowed us to iterate over two arguments, the purrr::pmap() function will allow us to iterate over an arbitrary number of arguments. In the case of our third mutate() function, we’ll iterate over the first three arguments of the dnorm() function. In case you forgot, those arguments are x, mean, and sd, respectively. Within our list(), we indicated we wanted to insert into them the response, mu, and sigma values. This returns the desired density values. Since our map2() and pmap() operations returned a nested tibble, we then followed them up with the unnest() function to make it easier to access the results.\nBefore unnesting, our nested tibble had 100 observations. After unnest(), we converted it to the long format, resulting in \\(100 \\times 200 = 20,000\\) observations.\nabc %\u0026gt;% distinct(condition) %\u0026gt;% add_fitted_draws(fit2, n = 20, dpar = c(\u0026quot;mu\u0026quot;, \u0026quot;sigma\u0026quot;)) %\u0026gt;% mutate(lower = qnorm(.025, mean = mu, sd = sigma), upper = qnorm(.975, mean = mu, sd = sigma)) %\u0026gt;% mutate(response = map2(lower, upper, seq, length.out = 200)) %\u0026gt;% mutate(density = pmap(list(response, mu, sigma), dnorm)) %\u0026gt;% unnest() %\u0026gt;% glimpse() ## Observations: 20,000 ## Variables: 12 ## Groups: condition, .row [5] ## $ condition \u0026lt;chr\u0026gt; \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;… ## $ .row \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ .chain \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw \u0026lt;int\u0026gt; 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79… ## $ .value \u0026lt;dbl\u0026gt; -0.05142892, -0.05142892, -0.05142892, -0.05142892, -0.05142892, -0.05142892, … ## $ mu \u0026lt;dbl\u0026gt; -0.05142892, -0.05142892, -0.05142892, -0.05142892, -0.05142892, -0.05142892, … ## $ sigma \u0026lt;dbl\u0026gt; 0.5490717, 0.5490717, 0.5490717, 0.5490717, 0.5490717, 0.5490717, 0.5490717, 0… ## $ lower \u0026lt;dbl\u0026gt; -1.12759, -1.12759, -1.12759, -1.12759, -1.12759, -1.12759, -1.12759, -1.12759… ## $ upper \u0026lt;dbl\u0026gt; 1.024732, 1.024732, 1.024732, 1.024732, 1.024732, 1.024732, 1.024732, 1.024732… ## $ response \u0026lt;dbl\u0026gt; -1.1275896, -1.1167739, -1.1059582, -1.0951425, -1.0843269, -1.0735112, -1.062… ## $ density \u0026lt;dbl\u0026gt; 0.1064434, 0.1106119, 0.1148989, 0.1193059, 0.1238338, 0.1284836, 0.1332564, 0… Hopefully, our last two lines look familiar. We group_by(.draw) just like in previous examples. However, our final mutate() line is a little simpler than in previous versions. Before we had to make that intermediary variable, g. Because we intend to plot these data with help from ggridges, we no longer have need for g. You’ll see. But the upshot is the only reason we’re adding this last mutate() line is to scale all the Gaussians to have the same maximum height the way Kruschke did.\nafd \u0026lt;- abc %\u0026gt;% distinct(condition) %\u0026gt;% add_fitted_draws(fit2, n = 20, dpar = c(\u0026quot;mu\u0026quot;, \u0026quot;sigma\u0026quot;)) %\u0026gt;% mutate(lower = qnorm(.025, mean = mu, sd = sigma), upper = qnorm(.975, mean = mu, sd = sigma)) %\u0026gt;% mutate(response = map2(lower, upper, seq, length.out = 200)) %\u0026gt;% mutate(density = pmap(list(response, mu, sigma), dnorm)) %\u0026gt;% unnest() %\u0026gt;% group_by(.draw) %\u0026gt;% mutate(density = density * .75 / max(density)) glimpse(afd) ## Observations: 20,000 ## Variables: 12 ## Groups: .draw [20] ## $ condition \u0026lt;chr\u0026gt; \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;a\u0026quot;… ## $ .row \u0026lt;int\u0026gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ .chain \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .iteration \u0026lt;int\u0026gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ .draw \u0026lt;int\u0026gt; 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292… ## $ .value \u0026lt;dbl\u0026gt; -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -… ## $ mu \u0026lt;dbl\u0026gt; -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -0.302783, -… ## $ sigma \u0026lt;dbl\u0026gt; 0.5187913, 0.5187913, 0.5187913, 0.5187913, 0.5187913, 0.5187913, 0.5187913, 0… ## $ lower \u0026lt;dbl\u0026gt; -1.319595, -1.319595, -1.319595, -1.319595, -1.319595, -1.319595, -1.319595, -… ## $ upper \u0026lt;dbl\u0026gt; 0.7140294, 0.7140294, 0.7140294, 0.7140294, 0.7140294, 0.7140294, 0.7140294, 0… ## $ response \u0026lt;dbl\u0026gt; -1.3195953, -1.3093761, -1.2991569, -1.2889377, -1.2787185, -1.2684993, -1.258… ## $ density \u0026lt;dbl\u0026gt; 0.1098804, 0.1141834, 0.1186089, 0.1231581, 0.1278322, 0.1326322, 0.1375591, 0… Let’s open ggridges\nlibrary(ggridges) Note how contrary to before, we set the global y axis to our condition grouping variable. It’s within the geom_ridgeline() function that we now specify height = density. Other than that, the main thing to point out is you might want to adjust the ylim parameters. Otherwise the margins aren’t the best.\nafd %\u0026gt;% ggplot(aes(x = response, y = condition)) + geom_ridgeline(aes(height = density, group = interaction(condition, .draw)), fill = NA, size = 1/3, color = adjustcolor(\u0026quot;steelblue\u0026quot;, alpha.f = 1/2)) + geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + coord_cartesian(ylim = c(1.25, 5.5)) “But I wanted my Gaussians tipped to the left!”, you say. Yep, we can do that, too. Three things: First, we’ll want to adjust the height parameter to -density. We want our Gaussians to extend under their baselines. Along with that, we need to include min_height = NA. Finally, we’ll switch out coord_cartesian() for good old coord_flip(). And you can adjust your ylim parameters as desired.\nafd %\u0026gt;% ggplot(aes(x = response, y = condition)) + geom_ridgeline(aes(height = -density, group = interaction(condition, .draw)), fill = NA, size = 1/3, color = adjustcolor(\u0026quot;steelblue\u0026quot;, alpha.f = 1/2), min_height = NA) + geom_jitter(data = abc, height = .05, shape = 1, alpha = 2/3) + coord_flip(ylim = c(0.5, 4.75)) I think it’s important to note that I’ve never met any of the people who helped me with this project. Academic twitter, man–it’s a good place to be.\n Session info sessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] ggridges_0.5.0 tidybayes_1.0.3 brms_2.7.0 Rcpp_1.0.0 bindrcpp_0.2.2 forcats_0.3.0 ## [7] stringr_1.3.1 dplyr_0.7.6 purrr_0.2.5 readr_1.1.1 tidyr_0.8.1 tibble_2.0.1 ## [13] ggplot2_3.1.0 tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] colorspace_1.3-2 rsconnect_0.8.8 rprojroot_1.3-2 ## [4] ggstance_0.3 markdown_0.8 base64enc_0.1-3 ## [7] rstudioapi_0.7 rstan_2.18.2 svUnit_0.7-12 ## [10] DT_0.4 fansi_0.4.0 mvtnorm_1.0-8 ## [13] lubridate_1.7.4 xml2_1.2.0 bridgesampling_0.4-0 ## [16] knitr_1.20 shinythemes_1.1.1 bayesplot_1.6.0 ## [19] jsonlite_1.5 broom_0.5.1 shiny_1.1.0 ## [22] compiler_3.5.1 httr_1.3.1 backports_1.1.2 ## [25] assertthat_0.2.0 Matrix_1.2-14 lazyeval_0.2.1 ## [28] cli_1.0.1 later_0.7.3 htmltools_0.3.6 ## [31] prettyunits_1.0.2 tools_3.5.1 igraph_1.2.1 ## [34] coda_0.19-2 gtable_0.2.0 glue_1.3.0 ## [37] reshape2_1.4.3 cellranger_1.1.0 nlme_3.1-137 ## [40] blogdown_0.8 crosstalk_1.0.0 xfun_0.3 ## [43] ps_1.2.1 rvest_0.3.2 mime_0.5 ## [46] miniUI_0.1.1.1 gtools_3.8.1 MASS_7.3-50 ## [49] zoo_1.8-2 scales_1.0.0 colourpicker_1.0 ## [52] hms_0.4.2 promises_1.0.1 Brobdingnag_1.2-5 ## [55] parallel_3.5.1 inline_0.3.15 shinystan_2.5.0 ## [58] yaml_2.1.19 gridExtra_2.3 loo_2.0.0 ## [61] StanHeaders_2.18.0-1 stringi_1.2.3 dygraphs_1.1.1.5 ## [64] pkgbuild_1.0.2 rlang_0.3.1 pkgconfig_2.0.2 ## [67] matrixStats_0.54.0 evaluate_0.10.1 lattice_0.20-35 ## [70] bindr_0.1.1 rstantools_1.5.0 htmlwidgets_1.2 ## [73] labeling_0.3 tidyselect_0.2.4 processx_3.2.1 ## [76] plyr_1.8.4 magrittr_1.5 bookdown_0.7 ## [79] R6_2.3.0 generics_0.0.2 pillar_1.3.1 ## [82] haven_1.1.2 withr_2.1.2 xts_0.10-2 ## [85] abind_1.4-5 modelr_0.1.2 crayon_1.3.4 ## [88] arrayhelpers_1.0-20160527 utf8_1.1.4 rmarkdown_1.10 ## [91] grid_3.5.1 readxl_1.1.0 callr_3.1.0 ## [94] threejs_0.3.1 digest_0.6.18 xtable_1.8-2 ## [97] httpuv_1.4.4.2 stats4_3.5.1 munsell_0.5.0 ## [100] viridisLite_0.3.0 shinyjs_1.0  ","date":1545264000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1545264000,"objectID":"42ba31c0d9f0e8429d86371da5384421","permalink":"/post/make-rotated-gaussians-kruschke-style/","publishdate":"2018-12-20T00:00:00Z","relpermalink":"/post/make-rotated-gaussians-kruschke-style/","section":"post","summary":"[edited Dec 23, 2018]\ntl;dr You too can make sideways Gaussian density curves within the tidyverse. Here’s how.\n Here’s the deal: I like making pictures. Over the past several months, I’ve been slowly chipping away at John Kruschke’s Doing Bayesian data analysis, Second Edition: A tutorial with R, JAGS, and Stan. Kruschke has a unique plotting style. One of the quirks is once in a while he likes to express the results of his analyses in plots where he shows the data alongside density curves of the model-implied data-generating distributions.","tags":["Bayesian","brms","Kruschke","plot","R","tutorial","tydiverse"],"title":"Make rotated Gaussians, Kruschke style","type":"post"},{"authors":null,"categories":[],"content":"Preamble I released the first bookdown version of my Statistical Rethinking with brms, ggplot2, and the tidyverse project a couple weeks ago. I consider it the 0.9.0 version. I wanted a little time to step back from the project before giving it a final edit for the first major edition. I also wanted to give others a little time to take a look and suggest edits, which some thankfully have.\nNow some time has passed, it’s become clear I’d like to add a bonus section on Bayesian meta-analysis. IMO, this is a natural extension of the hierarchical models McElreath introduced in chapter’s 12 and 13 of his text and of the measurement-error models he introduced in chapter 14. So the purpose of this post is to present a rough draft of how I’d like to introduce fitting meta-analyses with Bürkner’s great brms package.\nI intend to tack this section onto the end of chapter 14. If you have any constrictive criticisms, please pass them along.\nHere’s the rough draft (which I updated on 2018-11-12):\n Rough draft: Meta-analysis If your mind isn’t fully blown by those measurement-error and missing-data models, let’s keep building. As it turns out, meta-analyses are often just special kinds of multilevel measurement-error models. Thus, you can use brms::brm() to fit Bayesian meta-analyses, too.\nBefore we proceed, I should acknowledge that this section is heavily influenced by Matti Vourre’s great blog post, Meta-analysis is a special case of Bayesian multilevel modeling. And since McElreath’s text doesn’t directly address meta-analyses, we’ll take further inspiration from Gelman, Carlin, Stern, Dunson, Vehtari, and Rubin’s Bayesian data analysis, Third edition. We’ll let Gelman and colleagues introduce the topic:\n Discussions of meta-analysis are sometimes imprecise about the estimands of interest in the analysis, especially when the primary focus is on testing the null hypothesis of no effect in any of the studies to be combined. Our focus is on estimating meaningful parameters, and for this objective there appear to be three possibilities, accepting the overarching assumption that the studies are comparable in some broad sense. The first possibility is that we view the studies as identical replications of each other, in the sense we regard the individuals in all the studies as independent samples from a common population, with the same outcome measures and so on. A second possibility is that the studies are so different that the results of any one study provide no information about the results of any of the others. A third, more general, possibility is that we regard the studies as exchangeable but not necessarily either identical or completely unrelated; in other words we allow differences from study to study, but such that the differences are not expected a priori to have predictable effects favoring one study over another.… This third possibility represents a continuum between the two extremes, and it is this exchangeable model (with unknown hyperparameters characterizing the population distribution) that forms the basis of our Bayesian analysis…\nThe first potential estimand of a meta-analysis, or a hierarchically structured problem in general, is the mean of the distribution of effect sizes, since this represents the overall ‘average’ effect across all studies that could be regarded as exchangeable with the observed studies. Other possible estimands are the effect size in any of the observed studies and the effect size in another, comparable (exchangeable) unobserved study. (pp. 125—126, emphasis in the original)\n The basic version of a Bayesian meta-analysis follows the form\n\\[y_i \\sim \\text{Normal}(\\theta_i, \\sigma_i)\\]\nwhere \\(y_i\\) = the point estimate for the effect size of a single study, \\(i\\), which is presumed to have been a draw from a Normal distribution centered on \\(\\theta_i\\). The data in meta-analyses are typically statistical summaries from individual studies. The one clear lesson from this chapter is that those estimates themselves come with error and those errors should be fully expressed in the meta-analytic model. Which we do. The standard error from study \\(i\\) is specified \\(\\sigma_i\\), which is also a stand-in for the standard deviation of the Normal distribution from which the point estimate was drawn. Do note, we’re not estimating \\(\\sigma_i\\), here. Those values we take directly from the original studies.\nBuilding on the model, we further presume that study \\(i\\) is itself just one draw from a population of related studies, each of which have their own effect sizes. As such. we presume \\(\\theta_i\\) itself has a distribution following the form\n\\[\\theta_i \\sim \\text{Normal} (\\mu, \\tau)\\]\nwhere \\(\\mu\\) is the meta-analytic effect (i.e., the population mean) and \\(\\tau\\) is the variation around that mean, what you might also think of as \\(\\sigma_\\tau\\).\nSince there’s no example of a meta-analysis in the text, we’ll have to look elsewhere. We’ll focus on Gershoff and Grogan-Kaylor’s (2016) paper, Spanking and Child Outcomes: Old Controversies and New Meta-Analyses. From their introduction, we read:\n Around the world, most children (80%) are spanked or otherwise physically punished by their parents (UNICEF, 2014). The question of whether parents should spank their children to correct misbehaviors sits at a nexus of arguments from ethical, religious, and human rights perspectives both in the U.S. and around the world (Gershoff, 2013). Several hundred studies have been conducted on the associations between parents’ use of spanking or physical punishment and children’s behavioral, emotional, cognitive, and physical outcomes, making spanking one of the most studied aspects of parenting. What has been learned from these hundreds of studies? (p. 453)\n Our goal will be to learn Bayesian meta-analysis by answering part of that question. I’ve transcribed the values directly from Gershoff and Grogan-Kaylor’s paper and saved them as a file called spank. You can find the data in this project’s GitHub repository. Let’s load them and glimpse().\nspank \u0026lt;- readxl::read_excel(\u0026quot;spank.xlsx\u0026quot;) library(tidyverse) glimpse(spank) ## Observations: 111 ## Variables: 8 ## $ study \u0026lt;chr\u0026gt; \u0026quot;Bean and Roberts (1981)\u0026quot;, \u0026quot;Day and Roberts (1983)\u0026quot;, \u0026quot;Mi… ## $ year \u0026lt;dbl\u0026gt; 1981, 1983, 1971, 1988, 1990, 1961, 1962, 1990, 2002, 20… ## $ outcome \u0026lt;chr\u0026gt; \u0026quot;Immediate defiance\u0026quot;, \u0026quot;Immediate defiance\u0026quot;, \u0026quot;Immediate d… ## $ between \u0026lt;dbl\u0026gt; 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,… ## $ within \u0026lt;dbl\u0026gt; 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1,… ## $ d \u0026lt;dbl\u0026gt; -0.74, 0.36, 0.34, -0.08, 0.10, 0.63, 0.19, 0.47, 0.14, … ## $ ll \u0026lt;dbl\u0026gt; -1.76, -1.04, -0.09, -1.01, -0.82, 0.16, -0.14, 0.20, -0… ## $ ul \u0026lt;dbl\u0026gt; 0.28, 1.77, 0.76, 0.84, 1.03, 1.10, 0.53, 0.74, 0.70, 0.… In this paper, the effect size of interest is a Cohen’s d, derived from the formula\n\\[d = \\frac{\\mu_\\text{treatment} - \\mu_\\text{comparison}}{\\sigma_{pooled}}\\]\nwhere\n\\[\\sigma_{pooled} = \\sqrt{\\frac{((n_1 - 1) \\sigma_1^2) + ((n_2 - 1) \\sigma_2^2)}{n_1 + n_2 -2}}\\]\nTo help make the equation for \\(d\\) clearer for our example, we might re-express it as\n\\[d = \\frac{\\mu_\\text{spanked} - \\mu_\\text{not spanked}}{\\sigma_{pooled}}\\]\nMcElreath didn’t really focus on effect sizes in his text. If you need a refresher, you might check out Kelley and Preacher’s On effect size. But in words, Cohen’s d is a standardized mean difference between two groups.\nSo if you look back up at the results of glimpse(spank), you’ll notice the column d, which is indeed a vector of Cohen’s d effect sizes. The last two columns, ll and ul are the lower and upper limits of the associated 95% frequentist confidence intervals. But we don’t want confidence intervals for our d-values; we want their standard errors. Fortunately, we can compute those with the following formula\n\\[SE = \\frac{\\text{upper limit } – \\text{lower limit}}{3.92}\\]\nHere it is in code.\nspank \u0026lt;- spank %\u0026gt;% mutate(se = (ul - ll) / 3.92) glimpse(spank) ## Observations: 111 ## Variables: 9 ## $ study \u0026lt;chr\u0026gt; \u0026quot;Bean and Roberts (1981)\u0026quot;, \u0026quot;Day and Roberts (1983)\u0026quot;, \u0026quot;Mi… ## $ year \u0026lt;dbl\u0026gt; 1981, 1983, 1971, 1988, 1990, 1961, 1962, 1990, 2002, 20… ## $ outcome \u0026lt;chr\u0026gt; \u0026quot;Immediate defiance\u0026quot;, \u0026quot;Immediate defiance\u0026quot;, \u0026quot;Immediate d… ## $ between \u0026lt;dbl\u0026gt; 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,… ## $ within \u0026lt;dbl\u0026gt; 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1,… ## $ d \u0026lt;dbl\u0026gt; -0.74, 0.36, 0.34, -0.08, 0.10, 0.63, 0.19, 0.47, 0.14, … ## $ ll \u0026lt;dbl\u0026gt; -1.76, -1.04, -0.09, -1.01, -0.82, 0.16, -0.14, 0.20, -0… ## $ ul \u0026lt;dbl\u0026gt; 0.28, 1.77, 0.76, 0.84, 1.03, 1.10, 0.53, 0.74, 0.70, 0.… ## $ se \u0026lt;dbl\u0026gt; 0.52040816, 0.71683673, 0.21683673, 0.47193878, 0.471938… Now our data are ready, we can express our first Bayesian meta-analysis with the formula\n\\[ \\begin{eqnarray} \\text{d}_i \u0026amp; \\sim \u0026amp; \\text{Normal}(\\theta_i, \\sigma_i = \\text{se}_i) \\\\ \\theta_i \u0026amp; \\sim \u0026amp; \\text{Normal} (\\mu, \\tau) \\\\ \\mu \u0026amp; \\sim \u0026amp; \\text{Normal} (0, 1) \\\\ \\tau \u0026amp; \\sim \u0026amp; \\text{HalfCauchy} (0, 1) \\end{eqnarray} \\]\nThe last two lines, of course, spell out our priors. In psychology, it’s pretty rare to see Cohen’s d-values greater than the absolute value of \\(\\pm 1\\). So in the absence of more specific domain knowledge–which I don’t have–, it seems like \\(\\text{Normal} (0, 1)\\) is a reasonable place to start. And just like McElreath used \\(\\text{HalfCauchy} (0, 1)\\) as the default prior for the group-level standard deviations, it makes sense to use it here for our meta-analytic \\(\\tau\\) parameter.\nLet’s load brms.\nlibrary(brms) Here’s the code for the first model.\nb14.5 \u0026lt;- brm(data = spank, family = gaussian, d | se(se) ~ 1 + (1 | study), prior = c(prior(normal(0, 1), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 2000, warmup = 1000, cores = 4, chains = 4) One thing you might notice is our se(se) function excluded the sigma argument. If you recall from section 14.1, we specified sigma = T in our measurement-error models. The brms default is that within se(), sigma = FALSE. As such, we have no estimate for sigma the way we would if we were doing this analysis with the raw data from the studies. Hopefully this makes sense. The uncertainty around the d-value for each study \\(i\\) has already been encoded in the data as se.\nThis brings us to another point. We typically perform meta-analyses on data summaries. In my field and perhaps in yours, this is due to the historical accident that it has not been the norm among researchers to make their data publically available. So effect size summaries were the best we typically had. However, times are changing (e.g., here, here). If the raw data from all the studies for your meta-analysis are available, you can just fit a multilevel model in which the data are nested in the studies. Heck, you could even allow the studies to vary by \\(\\sigma\\) by taking the distributional modeling approach and specify something like sigma ~ 0 + study or even sigma ~ 1 + (1 | study).\nBut enough technical talk. Let’s look at the model results.\nprint(b14.5) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: d | se(se) ~ 1 + (1 | study) ## Data: spank (Number of observations: 111) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Group-Level Effects: ## ~study (Number of levels: 76) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.27 0.03 0.21 0.33 773 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.38 0.03 0.30 0.44 482 1.01 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Thus, in our simple Bayesian meta-analysis, we have a population Cohen’s d of about 0.38. Our estimate for \\(\\tau\\), 0.27, suggests we have quite a bit of between-study variability. One question you might ask is: What exactly are these Cohen’s ds measuring, anyways? We’ve encoded that in the outcome vector of the spank data.\nspank %\u0026gt;% distinct(outcome) %\u0026gt;% knitr::kable()   outcome    Immediate defiance  Low moral internalization  Child aggression  Child antisocial behavior  Child externalizing behavior problems  Child internalizing behavior problems  Child mental health problems  Child alcohol or substance abuse  Negative parent–child relationship  Impaired cognitive ability  Low self-esteem  Low self-regulation  Victim of physical abuse  Adult antisocial behavior  Adult mental health problems  Adult alcohol or substance abuse  Adult support for physical punishment    There are a few things to note. First, with the possible exception of Adult support for physical punishment, all of the outcomes are negative. We prefer conditions associated with lower values for things like Child aggression and Adult mental health problems. Second, the way the data are coded, larger effect sizes are interpreted as more negative outcomes associated with children having been spanked. That is, our analysis suggests spanking children is associated with worse outcomes. What might not be immediately apparent is that even though there are 111 cases in the data, there are only 76 distinct studies.\nspank %\u0026gt;% distinct(study) %\u0026gt;% count() ## # A tibble: 1 x 1 ## n ## \u0026lt;int\u0026gt; ## 1 76 In other words, some studies have multiple outcomes. In order to better accommodate the study- and outcome-level variances, let’s fit a cross-classified Bayesian meta-analysis reminiscent of the cross-classified chimp model from Chapter 13.\nb14.6 \u0026lt;- brm(data = spank, family = gaussian, d | se(se) ~ 1 + (1 | study) + (1 | outcome), prior = c(prior(normal(0, 1), class = Intercept), prior(cauchy(0, 1), class = sd)), iter = 2000, warmup = 1000, cores = 4, chains = 4) print(b14.6) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: d | se(se) ~ 1 + (1 | study) + (1 | outcome) ## Data: spank (Number of observations: 111) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Group-Level Effects: ## ~outcome (Number of levels: 17) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.08 0.02 0.04 0.14 876 1.00 ## ## ~study (Number of levels: 76) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.25 0.03 0.20 0.32 828 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## Intercept 0.35 0.04 0.28 0.44 550 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Now we have two \\(\\tau\\) parameters. We might plot them to get a sense of where the variance is at.\nposterior_samples(b14.6) %\u0026gt;% select(starts_with(\u0026quot;sd\u0026quot;)) %\u0026gt;% gather(key, tau) %\u0026gt;% mutate(key = str_remove(key, \u0026quot;sd_\u0026quot;) %\u0026gt;% str_remove(., \u0026quot;__Intercept\u0026quot;)) %\u0026gt;% ggplot(aes(x = tau, fill = key)) + geom_density(color = \u0026quot;transparent\u0026quot;, alpha = 2/3) + scale_fill_viridis_d(NULL, end = .85) + scale_y_continuous(NULL, breaks = NULL) + xlab(expression(tau)) + theme(panel.grid = element_blank()) So at this point, the big story is there’s more variability between the studies than there is the outcomes. But I still want to get a sense of the individual outcomes. Here we’ll use tidybayes::geom_halfeyeh() to help us make our version of a forest plot.\n# load tidybayes library(tidybayes) b14.6 %\u0026gt;% spread_draws(b_Intercept, r_outcome[outcome,]) %\u0026gt;% # add the grand mean to the group-specific deviations mutate(mu = b_Intercept + r_outcome) %\u0026gt;% ungroup() %\u0026gt;% mutate(outcome = str_replace_all(outcome, \u0026quot;[.]\u0026quot;, \u0026quot; \u0026quot;)) %\u0026gt;% # plot ggplot(aes(x = mu, y = outcome, fill = mu)) + # ggplot(aes(x = mu, y = reorder(outcome, mu))) + geom_halfeyeh(.width = .95, size = 2/3) + labs(x = expression(italic(\u0026quot;Cohen\u0026#39;s d\u0026quot;)), y = NULL) + theme(panel.grid = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_text(hjust = 0)) Nope, not a lot of variability, there. Let’s go one step further with the model. Doubling back to Gelman and colleagues, we read:\n When assuming exchangeability we assume there are no important covariates that might form the basis of a more complex model, and this assumption (perhaps misguidedly) is widely adopted in meta-analysis. What if other information (in addition to the data \\((n, y)\\)) is available to distinguish among the \\(J\\) studies in a meta-analysis, so that an exchangeable model is inappropriate? In this situation, we can expand the framework of the model to be exchangeable in the observed data and covariates, for example using a hierarchical regression model. (p. 126)\n One important covariate Gershoff and Grogan-Kaylor addressed in their meta-analysis was the type of study. The 76 papers they based their meta-analysis on contained both between- and within-participants designs. In the spank data, we’ve dummy coded that information with the between and within vectors. Both are dummy variables and within = 1 - between. Here are the counts.\nspank %\u0026gt;% count(between) ## # A tibble: 2 x 2 ## between n ## \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; ## 1 0 71 ## 2 1 40 When I use dummies in my models, I prefer to have the majority group stand as the reference category. As such, I typically name those variables by the minority group. In this case, most occasions are based on within-participant designs. Thus, we’ll go ahead and add the between variable to the model. While we’re at it, we’ll practice using the 0 + intercept syntax.\nb14.7 \u0026lt;- brm(data = spank, family = gaussian, d | se(se) ~ 0 + intercept + between + (1 | study) + (1 | outcome), prior = c(prior(normal(0, 1), class = b), prior(cauchy(0, 1), class = sd)), iter = 2000, warmup = 1000, cores = 4, chains = 4) print(b14.7) ## Family: gaussian ## Links: mu = identity; sigma = identity ## Formula: d | se(se) ~ 0 + intercept + between + (1 | study) + (1 | outcome) ## Data: spank (Number of observations: 111) ## Samples: 4 chains, each with iter = 2000; warmup = 1000; thin = 1; ## total post-warmup samples = 4000 ## ## Group-Level Effects: ## ~outcome (Number of levels: 17) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.08 0.02 0.04 0.14 1319 1.00 ## ## ~study (Number of levels: 76) ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## sd(Intercept) 0.25 0.03 0.20 0.32 1088 1.00 ## ## Population-Level Effects: ## Estimate Est.Error l-95% CI u-95% CI Eff.Sample Rhat ## intercept 0.38 0.05 0.29 0.48 1017 1.00 ## between -0.07 0.07 -0.21 0.07 1194 1.00 ## ## Samples were drawn using sampling(NUTS). For each parameter, Eff.Sample ## is a crude measure of effective sample size, and Rhat is the potential ## scale reduction factor on split chains (at convergence, Rhat = 1). Let’s take a closer look at b_between.\nposterior_samples(b14.7) %\u0026gt;% ggplot(aes(x = b_between, y = 0)) + geom_halfeyeh(point_interval = median_qi, .width = c(.5, .95)) + labs(x = \u0026quot;Overall difference for between- vs within-participant designs\u0026quot;, y = NULL) + scale_y_continuous(NULL, breaks = NULL) + theme(panel.grid = element_blank()) That difference isn’t as large I’d expect it to be. But then again, I’m no spanking researcher. So what do I know?\nThere are other things you might do with these data. For example, you might check for trends by year or, as the authors did in their manuscript, distinguish among different severities of corporal punishment. But I think we’ve gone far enough to get you started.\nIf you’d like to learn more about these methods, do check out Vourre’s Meta-analysis is a special case of Bayesian multilevel modeling. From his blog, you’ll learn additional tricks, like making a more traditional-looking forest plot with the brmstools::forest() function and how our Bayesian brms method compares with Frequentist meta-analyses via the metafor package. You might also check out Williams, Rast, and Bürkner’s manuscript, Bayesian Meta-Analysis with Weakly Informative Prior Distributions to give you an empirical justification for using a half-Cauchy prior for your meta-analysis \\(\\tau\\) parameters.\n Session info sessionInfo() ## R version 3.5.1 (2018-07-02) ## Platform: x86_64-apple-darwin15.6.0 (64-bit) ## Running under: macOS High Sierra 10.13.6 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] tidybayes_1.0.3 brms_2.7.0 Rcpp_1.0.0 bindrcpp_0.2.2 ## [5] forcats_0.3.0 stringr_1.3.1 dplyr_0.7.6 purrr_0.2.5 ## [9] readr_1.1.1 tidyr_0.8.1 tibble_2.0.1 ggplot2_3.1.0 ## [13] tidyverse_1.2.1 ## ## loaded via a namespace (and not attached): ## [1] colorspace_1.3-2 ggridges_0.5.0 ## [3] rsconnect_0.8.8 rprojroot_1.3-2 ## [5] ggstance_0.3 markdown_0.8 ## [7] base64enc_0.1-3 rstudioapi_0.7 ## [9] rstan_2.18.2 svUnit_0.7-12 ## [11] DT_0.4 fansi_0.4.0 ## [13] mvtnorm_1.0-8 lubridate_1.7.4 ## [15] xml2_1.2.0 bridgesampling_0.4-0 ## [17] knitr_1.20 shinythemes_1.1.1 ## [19] bayesplot_1.6.0 jsonlite_1.5 ## [21] broom_0.5.1 shiny_1.1.0 ## [23] compiler_3.5.1 httr_1.3.1 ## [25] backports_1.1.2 assertthat_0.2.0 ## [27] Matrix_1.2-14 lazyeval_0.2.1 ## [29] cli_1.0.1 later_0.7.3 ## [31] htmltools_0.3.6 prettyunits_1.0.2 ## [33] tools_3.5.1 igraph_1.2.1 ## [35] coda_0.19-2 gtable_0.2.0 ## [37] glue_1.3.0 reshape2_1.4.3 ## [39] cellranger_1.1.0 nlme_3.1-137 ## [41] blogdown_0.8 crosstalk_1.0.0 ## [43] xfun_0.3 ps_1.2.1 ## [45] rvest_0.3.2 mime_0.5 ## [47] miniUI_0.1.1.1 gtools_3.8.1 ## [49] MASS_7.3-50 zoo_1.8-2 ## [51] scales_1.0.0 colourpicker_1.0 ## [53] hms_0.4.2 promises_1.0.1 ## [55] Brobdingnag_1.2-5 parallel_3.5.1 ## [57] inline_0.3.15 shinystan_2.5.0 ## [59] yaml_2.1.19 gridExtra_2.3 ## [61] loo_2.0.0 StanHeaders_2.18.0-1 ## [63] stringi_1.2.3 highr_0.7 ## [65] dygraphs_1.1.1.5 pkgbuild_1.0.2 ## [67] rlang_0.3.1 pkgconfig_2.0.2 ## [69] matrixStats_0.54.0 evaluate_0.10.1 ## [71] lattice_0.20-35 bindr_0.1.1 ## [73] rstantools_1.5.0 htmlwidgets_1.2 ## [75] labeling_0.3 tidyselect_0.2.4 ## [77] processx_3.2.1 plyr_1.8.4 ## [79] magrittr_1.5 bookdown_0.7 ## [81] R6_2.3.0 generics_0.0.2 ## [83] pillar_1.3.1 haven_1.1.2 ## [85] withr_2.1.2 xts_0.10-2 ## [87] abind_1.4-5 modelr_0.1.2 ## [89] crayon_1.3.4 arrayhelpers_1.0-20160527 ## [91] utf8_1.1.4 rmarkdown_1.10 ## [93] grid_3.5.1 readxl_1.1.0 ## [95] callr_3.1.0 threejs_0.3.1 ## [97] digest_0.6.18 xtable_1.8-2 ## [99] httpuv_1.4.4.2 stats4_3.5.1 ## [101] munsell_0.5.0 viridisLite_0.3.0 ## [103] shinyjs_1.0 set.seed(5) n = 10 n_condition = 5 ABC = data_frame( condition = rep(c(\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;,\u0026quot;E\u0026quot;), n), response = rnorm(n * 5, c(0,1,2,1,-1), 0.5) ) ## Warning: `data_frame()` is deprecated, use `tibble()`. ## This warning is displayed once per session. m \u0026lt;- brm(response ~ (1|condition), data = ABC, control = list(adapt_delta = .99), prior = c( prior(normal(0, 1), class = Intercept), prior(student_t(3, 0, 1), class = sd), prior(student_t(3, 0, 1), class = sigma) )) ## Compiling the C++ model ## Start sampling ## ## SAMPLING FOR MODEL \u0026#39;aed3c976cefe3e319d41eeba97e15379\u0026#39; NOW (CHAIN 1). ## Chain 1: ## Chain 1: Gradient evaluation took 4.3e-05 seconds ## Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.43 seconds. ## Chain 1: Adjust your expectations accordingly! ## Chain 1: ## Chain 1: ## Chain 1: Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 1: Iteration: 200 / 2000 [ 10%] (Warmup) ## Chain 1: Iteration: 400 / 2000 [ 20%] (Warmup) ## Chain 1: Iteration: 600 / 2000 [ 30%] (Warmup) ## Chain 1: Iteration: 800 / 2000 [ 40%] (Warmup) ## Chain 1: Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 1: Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 1: Iteration: 1200 / 2000 [ 60%] (Sampling) ## Chain 1: Iteration: 1400 / 2000 [ 70%] (Sampling) ## Chain 1: Iteration: 1600 / 2000 [ 80%] (Sampling) ## Chain 1: Iteration: 1800 / 2000 [ 90%] (Sampling) ## Chain 1: Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 1: ## Chain 1: Elapsed Time: 0.524348 seconds (Warm-up) ## Chain 1: 0.531071 seconds (Sampling) ## Chain 1: 1.05542 seconds (Total) ## Chain 1: ## ## SAMPLING FOR MODEL \u0026#39;aed3c976cefe3e319d41eeba97e15379\u0026#39; NOW (CHAIN 2). ## Chain 2: ## Chain 2: Gradient evaluation took 1.2e-05 seconds ## Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. ## Chain 2: Adjust your expectations accordingly! ## Chain 2: ## Chain 2: ## Chain 2: Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 2: Iteration: 200 / 2000 [ 10%] (Warmup) ## Chain 2: Iteration: 400 / 2000 [ 20%] (Warmup) ## Chain 2: Iteration: 600 / 2000 [ 30%] (Warmup) ## Chain 2: Iteration: 800 / 2000 [ 40%] (Warmup) ## Chain 2: Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 2: Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 2: Iteration: 1200 / 2000 [ 60%] (Sampling) ## Chain 2: Iteration: 1400 / 2000 [ 70%] (Sampling) ## Chain 2: Iteration: 1600 / 2000 [ 80%] (Sampling) ## Chain 2: Iteration: 1800 / 2000 [ 90%] (Sampling) ## Chain 2: Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 2: ## Chain 2: Elapsed Time: 0.562304 seconds (Warm-up) ## Chain 2: 0.769204 seconds (Sampling) ## Chain 2: 1.33151 seconds (Total) ## Chain 2: ## ## SAMPLING FOR MODEL \u0026#39;aed3c976cefe3e319d41eeba97e15379\u0026#39; NOW (CHAIN 3). ## Chain 3: ## Chain 3: Gradient evaluation took 2.7e-05 seconds ## Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.27 seconds. ## Chain 3: Adjust your expectations accordingly! ## Chain 3: ## Chain 3: ## Chain 3: Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 3: Iteration: 200 / 2000 [ 10%] (Warmup) ## Chain 3: Iteration: 400 / 2000 [ 20%] (Warmup) ## Chain 3: Iteration: 600 / 2000 [ 30%] (Warmup) ## Chain 3: Iteration: 800 / 2000 [ 40%] (Warmup) ## Chain 3: Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 3: Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 3: Iteration: 1200 / 2000 [ 60%] (Sampling) ## Chain 3: Iteration: 1400 / 2000 [ 70%] (Sampling) ## Chain 3: Iteration: 1600 / 2000 [ 80%] (Sampling) ## Chain 3: Iteration: 1800 / 2000 [ 90%] (Sampling) ## Chain 3: Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 3: ## Chain 3: Elapsed Time: 0.662163 seconds (Warm-up) ## Chain 3: 0.553641 seconds (Sampling) ## Chain 3: 1.2158 seconds (Total) ## Chain 3: ## ## SAMPLING FOR MODEL \u0026#39;aed3c976cefe3e319d41eeba97e15379\u0026#39; NOW (CHAIN 4). ## Chain 4: ## Chain 4: Gradient evaluation took 1.2e-05 seconds ## Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.12 seconds. ## Chain 4: Adjust your expectations accordingly! ## Chain 4: ## Chain 4: ## Chain 4: Iteration: 1 / 2000 [ 0%] (Warmup) ## Chain 4: Iteration: 200 / 2000 [ 10%] (Warmup) ## Chain 4: Iteration: 400 / 2000 [ 20%] (Warmup) ## Chain 4: Iteration: 600 / 2000 [ 30%] (Warmup) ## Chain 4: Iteration: 800 / 2000 [ 40%] (Warmup) ## Chain 4: Iteration: 1000 / 2000 [ 50%] (Warmup) ## Chain 4: Iteration: 1001 / 2000 [ 50%] (Sampling) ## Chain 4: Iteration: 1200 / 2000 [ 60%] (Sampling) ## Chain 4: Iteration: 1400 / 2000 [ 70%] (Sampling) ## Chain 4: Iteration: 1600 / 2000 [ 80%] (Sampling) ## Chain 4: Iteration: 1800 / 2000 [ 90%] (Sampling) ## Chain 4: Iteration: 2000 / 2000 [100%] (Sampling) ## Chain 4: ## Chain 4: Elapsed Time: 0.556384 seconds (Warm-up) ## Chain 4: 0.630627 seconds (Sampling) ## Chain 4: 1.18701 seconds (Total) ## Chain 4: m %\u0026gt;% spread_draws(b_Intercept, r_condition[condition,]) %\u0026gt;% mutate(condition_mean = b_Intercept + r_condition) %\u0026gt;% ggplot(aes(y = condition, x = condition_mean, fill = condition_mean)) + geom_halfeyeh()  ","date":1539475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1539475200,"objectID":"e4e0cca48a080bc20b2083715d19b5bf","permalink":"/post/bayesian-meta-analysis/","publishdate":"2018-10-14T00:00:00Z","relpermalink":"/post/bayesian-meta-analysis/","section":"post","summary":"Preamble I released the first bookdown version of my Statistical Rethinking with brms, ggplot2, and the tidyverse project a couple weeks ago. I consider it the 0.9.0 version. I wanted a little time to step back from the project before giving it a final edit for the first major edition. I also wanted to give others a little time to take a look and suggest edits, which some thankfully have.","tags":["Bayesian","brms","R","meta-analysis","spanking","Statistical Rethinking","tutorial"],"title":"Bayesian meta-analysis in brms","type":"post"},{"authors":null,"categories":[],"content":"The other day, my Twitter feed informed me Penn Jillette just clocked in 1000 consecutive days of meditation using the Headspace app. Now he’s considering checking out Sam Harris’s new Waking Up meditation app. Sam left a congratulatory comment on Penn’s tweet.\nWell done, Penn! https://t.co/SZkKocIPEH\n\u0026mdash; Sam Harris (@SamHarrisOrg) October 7, 2018  The whole thing was rainbows and kittens. And it reminded me to pass on some advice: Stop using fee-based meditation apps!\nWhat? The Headspace app is popular and highly-rated. It’s free to download and has some nice features, like reminders to meditate. However, if you want full access to its library of guided meditation audio recordings, you’ll need to pay a fee at a monthly, yearly, or lifetime rate.\n Sam Harris’s Waking Up app app is also free to download. It’s new and, in fairness, we’ll have to wait and see how its format will unfold. But at present it has more of a course-type format. The free version gives you access to five guided meditations and three lessons. But if you want full access to the app’s content, you also have to subscribe.\n I have no problem with the Headspace and Waking Up apps. They have many fine features. And I’m even a fan of a lot Harris’s work. But we have a cheaper, high-quality option:\n Consider Insight Timer  Insight Timer comes with a free and pay versions, too. But just download the free version. It’s excellent and all you need for your meditation needs. Let me list the reasons why.\nThe free library is extensive. At the time of this writing, my free subscription to Insight Timer gives me access to some 12,000 guided meditation audios. Most of them are in English. But many are offered in other languages, such as Hebrew, Malay, and Spanish.\n Duration. Their durations vary. The bulk of the guided meditations seem to be in the 5-to-20-minute range. But some last more than an hour.\n  People and their voices. Insight Timer’s deep library boasts an impressive cast of meditation teachers. I was happy to see some familiar high-profile meditation teachers, such as Tara Brach and Joseph Goldstein. But I have also discovered new favorites, like Stephen Pende Wormland and Dawn Mauricio. To be sure, the quality of the audio recordings varies. But more importantly, they also vary in terms of vocal tone and pacing. There should be a vocal style to suit just about everyone.\n  Emphasis. I’m an academic and generally prefer meditations that are secular and connected to the clinical literature (e.g., this recent meta-analysis). Happily, the Insight Timer library contains offerings based on mindfulness-based stress reduction (MBSR) and its derivatives (e.g., mindfulness-based cognitive therapy, mindfulness-based relapse prevention).\n But you can also find meditations grounded within a number of faith traditions.\n  Music. I’ve focused mainly on vocally-driven meditations. However, Insight Timer also contains music/sound-based recordings. I’m partial to recordings featuring Tibetan singing bowls.\n   It’s a timer, too. Sometimes you just want a silent meditation. For those occasions, Insight Timer offers a nice timer feature. You can set it like a stopwatch to whatever duration you prefer, and choose among an array of sounds to mark the beginning and end of your sit.\n  It tracks. If you go to the Profile section of the app, you’ll discover it keeps track of your use and displays various summaries in attractive bar plots.\n [And yes, I generally agree with Richard McElreath: “The only problem with barplots is that they have bars” (p. 203, Statistical Rethinking). You can’t have everything.]\n  Insight Timer is great for researchers Insight Timer allows you to download your data as a CSV file, which you can keep for yourself or email to others. Over the years, I’ve used the app to run group meditations within my research protocols. Since I selected the audios from the app, it allowed me to standardize the instructions across meditation sessions. Although my research assistants and I used the app on our phones to play the audios, our participants would use the timer functions on the apps on their phones to record their sessions. This gave us duplicate attendance records: one on a sign-in sheet and another on their phones. In longitudinal studies, participants could use the app on their own time and each of those sessions were recorded in the app. At the end of our studies, we were then able to download their use records as CSV files ready for pre-analysis data wrangling.\n Parting thoughts Insight Timer has other functions, such as social networking and dharma talks. I just don’t care about those things, so you can learn about them on your own. But if you’re interested in learning about meditation or even if you’re a veteran meditator looking for a convenient app to augment your practice with, do consider Insight Timer. There’s no reason to spend your money on the alternatives before you capitalize on such a powerful resource that’s available to you for free.\n ","date":1538870400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538870400,"objectID":"798a524eefe980436a075f3a7f77ccee","permalink":"/post/dont-pay-to-meditate/","publishdate":"2018-10-07T00:00:00Z","relpermalink":"/post/dont-pay-to-meditate/","section":"post","summary":"The other day, my Twitter feed informed me Penn Jillette just clocked in 1000 consecutive days of meditation using the Headspace app. Now he’s considering checking out Sam Harris’s new Waking Up meditation app. Sam left a congratulatory comment on Penn’s tweet.\nWell done, Penn! https://t.co/SZkKocIPEH\n\u0026mdash; Sam Harris (@SamHarrisOrg) October 7, 2018  The whole thing was rainbows and kittens. And it reminded me to pass on some advice: Stop using fee-based meditation apps!","tags":["app","Insight Timer","MBCT","MBRP","MBSR","meditation","mindfulness","smartphone"],"title":"Don't pay to meditate","type":"post"},{"authors":null,"categories":[],"content":"tl;dr I just self-published a book-length version of my project Statistical Rethinking with brms, ggplot2, and the tidyverse. By using Yihui Xie’s bookdown package, I was able to do it for free. If you’ve never heard of it, bookdown enables R users to write books and other long-form articles with R Markdown. You can save your bookdown products in a variety of formats (e.g., PDF, HTML) and publish them in several ways, too. The purpose of this post is to give readers a sense of how I used bookdown to make my project. I propose there are three fundamental skill sets you need basic fluency in before playing with bookdown. Those three are\n R and R Studio, Scripts and R Markdown files, and Git and GitHub.   Start with R First things first. Since bookdown is a package for use in the R environment, you’re going to have to use R. If you’re unfamiliar with it, R is a freely-available programming language particularly well-suited for data analysis. If you’ve not used R before, learning how to self-publish books is a great incentive to start learning. But unless you already have a background in programming, I think bookdown is poorly-suited for novices. R newbies should check out Roger Peng’s R Programming for Data Science or Grolemund and Wickham’s R for Data Science. Both are freely available online and, as it would turn out, made with bookdown. Also, new users should be aware that although you can interact with R directly, there are a variety of other ways to interface with R. I recommend using R Studio. You can find some nice reasons, here. For basic instructions on how to install R and R Studio, you might start here. And if you prefer video tutorials to help you with the installation, just do a simple search in your favorite video-sharing website and several should pop up.\nPersonally, I started using R—via R Studio—during the 2015/2016 winter break before taking a spring semester statistics course based around an R package. [In case you’re curious, it was a structural equation modeling course based around a text by Beaujean which featured the lavaan package]. At the time, I was already familiar with structural equation modeling, so the course was a nice opportunity to learn R. In addition, I was concurrently enrolled in a course on multilevel modeling based on Singer and Willet’s classic text. The professor of that course primarily used SAS to teach the material, but he was flexible and allowed me to do the work with R, instead. So that was my introduction to R–a semester of immersion in #rstats. Here are some other tips on how to learn R.\n bookdown uses Markdown If you work with R through R Studio, you can do a handful of things through dropdowns. But really, if you’re going to be using R, you’re going to be coding. As it turns out, there are a variety of ways to code in R. One of the most basic ways is via the console, which I’m not going to cover in any detail.\nThe console is fine for quick operations, but you’re going to want to do most of your coding in some kind of a script. R Studio allows users to save and execute code in script files, which you can learn more about here. Basic script files are nice in that they allow you to both save and annotate your code.\nHowever, the annotation options in R Studio script files are limited. After using R Studio scripts for about a year, I learned about R Notebooks. These are special files that allow you to intermingle your R code with prose and the results of the code. R Notebooks also allow users to transform the working documents into professional-looking reports in various formats (e.g., PDF, HTML). And unlike the primitive annotation options with simple script files, R Notebooks use Markdown to allow users to format their prose with things like headers, italicized font, insert hyperlinks, and even embed images. So Markdown, then, is a simple language that allows for many of those functions.\nWithin the R Studio environment, you can use Markdown with two basic file types: R Markdown files and R Notebook files. R Notebook files are just special kinds of R Markdown files that have, IMO, a better interface. That is, R Notebooks are the newer nicer version of R Markdown files. The main point here is that when I say “bookdown uses Markdown”, I’m pointing out that one of the important skills you’ll want to develop before making content with bookdown is how to use Markdown within R Studio. It’s not terribly complicated to learn, and you can get an overview of the basics here or here or here, or an exhaustive treatment here.\nIf you’re a novice, it’ll take you a few days, weeks, or months to get a firm grasp of R. Not so with R Markdown files. You’ll have the basics of those down in an afternoon. That said, I had been an R Notebook user for more than a year before trying my hand at bookdown.\nThe first big edition of my Statistical Rethinking with brms, ggplot2, and the tidyverse project came in the form of R Notebook files and their HTML counterparts stored in one of my projects on the Open Science Framework. I don’t update it very often, but you can still find it here. If you’re not familiar with it, the OSF is a “free, open source web application that connects and supports the research workflow, enabling scientists to increase the efficiency and effectiveness of their research.” In addition to their wiki, you might check out some of their video tutorials.\n You’ll need GitHub, too I’m actually not sure whether you need to know how to use Git and GitHub to use bookdown. In his authoritative book, bookdown: Authoring Books and Technical Documents with R Markdown, Yihui Xie mentioned GitHub in every chapter. If you go to your favorite video-sharing website to look for instructional videos on bookdown, you’ll see the instructors take GitHub as a given, too. If you’re stubborn and have enough ingenuity, you might find a way to successfully use bookdown without GitHub, but you may as well go with the flow on this one.\nIf you’ve never heard of it before, Git is a system for version control. By version control, I mean a system by which you can keep track of changes to your code, over time. Even if you don’t have a background in programming, consider a scenario where you had to keep track of many versions of a writing project, perhaps saving your files as first_draft.docx, second_draft.docx, final_draft.docx, final_draft_2.docx… This was your own make-shift attempt at version control for writing. I’ve seen a lot of introductory material recommend Git and GitHub by leading with version control. And indeed, they do serve that purpose. But IMO, leading with version control is a rhetorical mistake when talking to non-programmers. I haven’t found Git and GitHub the most intuitive and if version control was the only benefit, they wouldn’t be worth the effort. But there are other good reasons to learn.\nIMO, the best reason to learn Git and GitHub is because they allow you to make your work publically available. When you just use Git, the work stays on your computer. But GitHub allows you to save your files online, too. This makes it easy for others to review them and give you feedback. GitHub also allows you to save things like data files online. So if you’re a working scientist, Git and GitHub might allow you to make a site—a repository—to house the de-identified data and statistical code for one of your projects. It’s another way to do open science. In addition, you can repurpose GitHub to work as blog or an analytic portfolio. And if you’d like to use bookdown, Git and GitHub will be a part of how you manage the files for your projects and make your work more accessible to others.\nIf you’re new to all this, you could probably blindly follow along with the steps in Yihui Xie’s bookdown manual or any of the online video tutorials. But I suspect that’d be pretty confusing. Before attempting a bookdown project, spend some time getting comfortable with Git and GitHub, first. The best introduction to the topic I’ve seen is Jenny Bryan’s Happy Git and GitHub for the useR, which, you guessed it, is also freely available and powered by bookdown.\nAs I hinted, I found Git and GitHub baffling, at first. I checked out a few online video tutorials, but found them of little help. It really was Bryan’s book that finally got me going. And I’m glad I did. I’ve been slowly working with GitHub for about a year—here’s my profile—and my first major project was putting together the files for the individual chapters in the Statistical_Rethinking_with_brms_ggplot2_and_the_tidyverse project. They originally lived as R Notebook files, eventually rendered in a GitHub-friendly .md file format. After a while, I started playing around with README-only projects, which are basically a poor man’s GitHub version of blog posts (e.g., check out this one). For me, and probably for your future bookdown projects, the most important GitHub skills to learn are commits, pushes, and forkes.\nI’d fooled around with GitHub a tiny bit before launching my Statistical Rethinking with brms, ggplot2, and the tidyverse project on the OSF. But it was confusing and after an hour or two of trying to make sense of it, I gave up and just figured the OSF would be good enough. After folks started noticing the project, I got a few comments that it’d be more accessible on GitHub. That was what finally influenced me to buckle down learn it in earnest. I’m still a little clunky with it, but I’m functional enough to do things like make this blog. With a little patience and practice, you can get there, too.\n Let Yihui Xie guide you So far we’ve covered\n R and R Studio Scripts and R Markdown files Git and GitHub  You don’t have become an expert, but you’ll need to become roughly fluent in all three to make good use of bookdown. Basically, if you are able to load data into R, document a rudimentary analysis in an R Notebook file, and then share the project in a non-embarrassing way in GitHub, you’re ready to use bookdown.\nI’ve already mentioned it, but the authoritative work on bookdown is Yihui Xie’s bookdown: Authoring Books and Technical Documents with R Markdown. Yihui Xie, of course, is the author of the package. It’s probably best to just start there, going bit by bit. He also gave an RStudio webinar, Authoring Books with R Markdown, which I found to be a helpful supplement.\nThe complete version of my Statistical Rethinking with brms, ggplot2, and the tidyverse project has 15 chapters and several preamble sections. Almost all the chapters files include a lot of computationally-intensive code, with the simulations for chapter 6 taking multiple hours to compute. I do not recommend starting off with a project like that, at least not all at once. If you follow along with Yihui Xie’s guide, you’ll practice stitching together simple files, first. After learning those basics, I then picked up other helpful tricks, like caching analyses.\nAlthough I didn’t use these resources while I was learning bookdown, you might also benefit from checking out\n Sean Kross’s How to Start a Bookdown Book, Karl Broman’s omg, bookdown!, Rachael Lappan’s Using Bookdown for tidy documentation, or Pablo Casas’s How to self-publish a book: A handy list of resources.   ","date":1538611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1538611200,"objectID":"f9676350628488b9d5a7ed32711cdf5f","permalink":"/post/how-bookdown/","publishdate":"2018-10-04T00:00:00Z","relpermalink":"/post/how-bookdown/","section":"post","summary":"tl;dr I just self-published a book-length version of my project Statistical Rethinking with brms, ggplot2, and the tidyverse. By using Yihui Xie’s bookdown package, I was able to do it for free. If you’ve never heard of it, bookdown enables R users to write books and other long-form articles with R Markdown. You can save your bookdown products in a variety of formats (e.g., PDF, HTML) and publish them in several ways, too.","tags":["Bayesian","bookdown","brms","Git","GitHub","Markdown","R","Statistical Rethinking","tidyerse","tutorial"],"title":"bookdown, My Process","type":"post"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536469200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1536469200,"objectID":"6a451186c775f5f0adb3a0416d0cb711","permalink":"/tutorial/example/","publishdate":"2018-09-09T00:00:00-05:00","relpermalink":"/tutorial/example/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]