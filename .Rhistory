cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m0)
# name the parameters with the Greek terms
names <- c("beta[0]", "beta[1]", "sigma[0]", "sigma[1]", "rho", "sigma[epsilon]")
# for the vertical lines marking off the true values
vline <-
tibble(name = names,
true_value = c(b0, b1, sigma0, sigma1, rho, sigma_e))
# wrangle
posterior_samples(m0) %>%
select(b_Intercept:sigma) %>%
set_names(names) %>%
pivot_longer(everything()) %>%
# plot
ggplot(aes(x = value, y = 0)) +
stat_halfeye(.width = .95, normalize = "panels", size = 1/2) +
geom_vline(data = vline,
aes(xintercept = true_value),
size = 1/4, linetype = 2) +
scale_y_continuous(NULL, breaks = NULL) +
xlab("marginal posterior") +
facet_wrap(~name, scales = "free", labeller = label_parsed)
small_data_long <-
d %>%
filter(time == 0 | time == 1) %>%
select(-intercepts, -slopes) %>%
mutate(`pre/post` = factor(if_else(time == 0, "pre", "post"),
levels = c("pre", "post")))
head(small_data_long)
small_data_wide <-
small_data_long %>%
select(-time) %>%
pivot_wider(names_from = `pre/post`, values_from = y) %>%
mutate(change = post - pre)
head(small_data_wide)
m1 <-
brm(data = small_data_wide,
post ~ 1,
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m1)
small_data_wide %>%
summarise(mean = mean(post),
sd = sd(post))
m2 <-
brm(data = small_data_wide,
post ~ 1 + pre,
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m2)
small_data_wide %>%
summarise(correlation = cor(pre, post))
small_data_wide %>%
summarise(pre_mean = mean(pre))
fixef(m2)[1, 1] + fixef(m2)[2, 1] * mean(small_data_wide$pre)
nd <- tibble(pre = mean(small_data_wide$pre))
fitted(m2, newdata = nd)
m3 <-
brm(data = small_data_wide,
bf(post ~ 1 + pre) +
bf(pre ~ 1) +
set_rescor(rescor = FALSE),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m3)
m4 <-
brm(data = small_data_wide,
bf(post ~ 1) +
bf(pre ~ 1) +
set_rescor(rescor = TRUE),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m4)
small_data_wide %>%
pivot_longer(pre:post) %>%
group_by(name) %>%
summarise(mean = mean(value),
sd = sd(value)) %>%
mutate_if(is.double, round, digits = 2)
small_data_wide %>%
summarise(correlation = cor(pre, post))
posterior_samples(m4) %>%
mutate(change = b_post_Intercept - b_pre_Intercept) %>%
summarise(mu_change = mean(change))
m5 <-
brm(data = small_data_wide,
change ~ 1,
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m5)
small_data_wide %>%
summarise(change = mean(change),
`post - pre` = mean(post - pre))
m6 <-
brm(data = small_data_wide,
change ~ 1 + pre,
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m6)
fixef(m6)[1, 1] + fixef(m6)[2, 1] * mean(small_data_wide$pre)
small_data_wide %>%
summarise(mean = mean(change))
nd <- tibble(pre = mean(small_data_wide$pre))
fitted(m6, newdata = nd)
rho
m7 <-
brm(data = small_data_wide,
bf(change ~ 1 + pre) +
bf(pre ~ 1) +
set_rescor(rescor = FALSE),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m7)
posterior_samples(m7) %>%
mutate(pre    = b_pre_Intercept,
change = b_change_Intercept + b_change_pre * b_pre_Intercept) %>%
mutate(post = pre + change) %>%
pivot_longer(pre:post) %>%
group_by(name) %>%
mean_qi(value) %>%
mutate_if(is.double, round, digits = 2)
small_data_wide %>%
pivot_longer(-id) %>%
group_by(name) %>%
summarise(mean = mean(value)) %>%
mutate_if(is.double, round, digits = 2)
m8 <-
brm(data = small_data_wide,
bf(change ~ 1) +
bf(pre ~ 1) +
set_rescor(rescor = TRUE),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m8)
rho
p2 <-
small_data_wide %>%
ggplot(aes(x = pre, y = change)) +
geom_point() +
stat_ellipse(color = "grey50")
(p1 + p2) &
coord_cartesian(xlim = range(small_data_wide$pre),
ylim = range(small_data_wide$change))
m9 <-
brm(data = small_data_long,
y ~ 1 ,
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
print(m9)
small_data_long %>%
summarise(mean = mean(y),
sd = sd(y))
m10 <-
brm(data = small_data_long,
y ~ 1 + (1 | id),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000,
control = list(adapt_delta = .99))
print(m10)
posterior_samples(m10) %>%
mutate(icc = sd_id__Intercept^2 / (sd_id__Intercept^2 + sigma^2)) %>%
ggplot(aes(x = icc, y = 0)) +
stat_halfeye(.width = .95) +
scale_x_continuous("Intraclass correlation coefficient (ICC)",
breaks = 0:5 / 5, expand = c(0, 0), limits = 0:1) +
scale_y_continuous(NULL, breaks = NULL)
m11 <-
brm(data = small_data_long,
y ~ 1 + (1 | time) + (1 | id),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000,
control = list(adapt_delta = .9999,
max_treedepth = 11))
print(m11)
posterior_samples(m11) %>%
pivot_longer(starts_with("r_id")) %>%
ggplot(aes(x = value, y = reorder(name, value))) +
stat_pointinterval(point_interval = mean_qi, .width = .95, size = 1/6) +
scale_y_discrete(expression(italic(i)), breaks = NULL) +
labs(subtitle = expression(sigma[id]~is~the~summary~of~the~variation~across~these)) +
xlab(expression(italic(u)[id]['['*italic(i)*']']))
posterior_samples(m11) %>%
pivot_longer(starts_with("r_id")) %>%
ggplot(aes(x = value, y = reorder(name, value))) +
stat_pointinterval(point_interval = mean_qi, .width = .95, size = 1/6) +
scale_y_discrete(expression(italic(i)), breaks = NULL) +
labs(subtitle = expression(sigma[id]~is~the~summary~of~the~variation~across~these)) +
xlab(expression(italic(u)[id][','*italic(i)]))
posterior_samples(m11) %>%
transmute(pre  = b_Intercept + `r_time[0,Intercept]`,
post = b_Intercept + `r_time[1,Intercept]`) %>%
pivot_longer(everything()) %>%
group_by(name) %>%
mean_qi(value) %>%
mutate_if(is.double, round, digits = 2)
posterior_samples(m11) %>%
select(sd_id__Intercept:sigma) %>%
set_names("sigma[id]", "sigma[time]", "sigma[epsilon]") %>%
pivot_longer(everything()) %>%
mutate(name = factor(name, levels = c("sigma[epsilon]", "sigma[time]", "sigma[id]"))) %>%
ggplot(aes(x = value, y = name)) +
tidybayes::stat_halfeye(.width = .95, size = 1, normalize = "xy") +
scale_x_continuous("marginal posterior", expand = expansion(mult = c(0, 0.05)), breaks = c(0, 1, 2, 5)) +
scale_y_discrete(NULL, labels = ggplot2:::parse_safe) +
coord_cartesian(xlim = c(0, 5.25),
ylim = c(1.5, 3.5)) +
theme(axis.text.y = element_text(hjust = 0))
m19 <-
brm(data = small_data_long,
bf(y ~ 1 + time + (1 |x| id),
sigma ~ 1 + (1 |x| id)),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000,
control = list(adapt_delta = .9))
posterior_samples(m19) %>%
pivot_longer(starts_with("r_id__sigma")) %>%
mutate(sigma_i = exp(sd_id__sigma_Intercept + value)) %>%
ggplot(aes(x = sigma_i, y = reorder(name, sigma_i))) +
stat_pointinterval(point_interval = mean_qi, .width = .95, size = 1/6) +
scale_y_discrete(expression(italic(i)), breaks = NULL) +
xlab(expression(sigma[italic(i)]))
bind_rows(
posterior_samples(m19) %>% select(starts_with("r_id[")) %>% set_names(1:100),
posterior_samples(m19) %>% select(starts_with("r_id__sigma") %>% set_names(1:100))
) %>%
mutate(iter = rep(1:c(n() / 2), times = 2),
type = rep(c("intercept", "log_sigma"), each = n() / 2)) %>%
pivot_longer(-c(iter, type)) %>%
pivot_wider(names_from = type, values_from = value) %>%
ggplot(aes(x = intercept, y = log_sigma, group = name)) +
stat_ellipse(geom = "polygon", level = .01, alpha = 1/4) +
labs(x = expression(italic(u)[0][italic(i)]),
y = expression(log(italic(u)[2][italic(i)])))
m20 <-
brm(data = small_data_long,
bf(y ~ 1 + time + (0 + time | id),
sigma ~ 1 + (1 | id)),
seed = 1,
cores = 4, chains = 4, iter = 3500, warmup = 1000)
bind_rows(
posterior_samples(m20) %>% select(starts_with("r_id[")) %>% set_names(1:100),
posterior_samples(m20) %>% select(starts_with("r_id__sigma") %>% set_names(1:100))
) %>%
mutate(iter = rep(1:c(n() / 2), times = 2),
type = rep(c("slope", "log_sigma"), each = n() / 2)) %>%
pivot_longer(-c(iter, type)) %>%
pivot_wider(names_from = type, values_from = value) %>%
ggplot(aes(x = slope, y = log_sigma, group = name)) +
stat_ellipse(geom = "polygon", level = .01, alpha = 1/4) +
labs(x = expression(italic(u)[1][italic(i)]),
y = expression(log(italic(u)[2][italic(i)])))
vary_effects %>%
summarise(b0 = mean(intercepts),
b1 = mean(slopes),
sigma0 = sd(intercepts),
sigma1 = sd(slopes)) %>%
mutate_all(round, digits = 2)
vary_effects %>%
summarise(b0 = mean(intercepts),
b1 = mean(slopes),
sigma0 = sd(intercepts),
sigma1 = sd(slopes)) %>%
mutate_all(round, digits = 3)
vary_effects %>%
summarise(b0 = mean(intercepts),
b1 = mean(slopes),
sigma0 = sd(intercepts),
sigma1 = sd(slopes)) %>%
mutate_all(round, digits = 2)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::preview_site(startup = TRUE)
effecctsize::sd_pooled
blogdown:::new_post_addin()
3-2
library(brms)
library(tidybayes)
library(tidyverse)
# adjust the global plotting theme
theme_set(
theme_linedraw() +
theme(text = element_text(family = "Times"),
panel.grid = element_blank(),
strip.text = element_text(margin = margin(b = 3, t = 3)))
)
d <-
tribble(
~id, ~tx, ~t1, ~t2, ~t3, ~t4,
101, -0.5, 3, 5, 5,  7,
102, -0.5, 4, 4, 6,  6,
103, -0.5, 4, 5, 7,  8,
104, -0.5, 5, 6, 6,  8,
105, -0.5, 5, 6, 7,  8,
106, -0.5, 5, 7, 7,  7,
107, -0.5, 5, 6, 8,  8,
108, -0.5, 6, 6, 7,  9,
109, -0.5, 6, 8, 9,  10,
110, -0.5, 7, 7, 8,  9,
111,  0.5, 3, 5, 7,  9,
112,  0.5, 4, 7, 9,  11,
113,  0.5, 4, 6, 8,  11,
114,  0.5, 5, 7, 9,  10,
115,  0.5, 5, 6, 9,  11,
116,  0.5, 5, 7, 10, 10,
117,  0.5, 5, 8, 8,  11,
118,  0.5, 6, 7, 9,  12,
119,  0.5, 6, 9, 11, 13,
120,  0.5, 7, 8, 10, 12
) %>%
mutate(`t4-t1`   = t4 - t1,
condition = ifelse(tx == -0.5, "control", "treatment"))
# inspect the first six rows
head(d)
# set the global plotting theme
theme_set(theme_linedraw() +
theme(text = element_text(family = "Times"),
panel.grid = element_blank()))
d %>%
pivot_longer(t1:t4) %>%
mutate(time      = str_extract(name, "\\d") %>% as.double(),
condition = ifelse(tx < 0, "tx = -0.5 (control)", "tx = 0.5 (treatment)")) %>%
ggplot(aes(x = time, y = value)) +
stat_smooth(aes(color = condition),
method = "lm", formula = 'y ~ x',
se = F, size = 4) +
geom_line(aes(group = id),
size = 1/4) +
scale_color_viridis_d(end = .75, direction = -1, breaks = NULL) +
facet_wrap(~ condition)
# wrangle
d_long <-
d %>%
pivot_longer(t1:t4, values_to = "y") %>%
mutate(time = str_extract(name, "\\d") %>% as.double()) %>%
mutate(time_f = (time * 2) - 5,
time_c = time - mean(time),
time0  = time - 1,
time01 = (time - 1) / 3)
# what have we done?
head(d_long)
fit1 <-
brm(data = d_long,
family = gaussian,
y ~ 1 + time0 + tx + time0:tx + (1 + time0 | id),
cores = 4,
seed = 1)
print(fit1)
fixef(fit1)["time0:tx", ]
fixef(fit1)["time0:tx", -2] * 3
# group-level change score means
m_change_t <- filter(d, tx ==  "0.5") %>% summarise(m = mean(`t4-t1`)) %>% pull()  # 6
m_change_c <- filter(d, tx == "-0.5") %>% summarise(m = mean(`t4-t1`)) %>% pull()  # 3
# difference in change score means
m_change_t - m_change_c
data.frame(fixef(fit1)[, -2] * 3) %>%
rownames_to_column("coefficient") %>%
filter(coefficient == "time0:tx") %>%
ggplot(aes(x = Estimate, xmin = Q2.5, xmax = Q97.5, y = 0)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_pointrange(fatten = 1) +
scale_y_continuous(NULL, breaks = NULL) +
xlab(expression("unstandardized difference in change scores"~(beta[1][1])))
# standard deviation for the criterion across all time points
d_long %>%
summarise(sd = sd(y))
# standard deviation for the criterion at baseline
d_long %>%
filter(time == 1) %>%
summarise(sd = sd(y))
sd_raw_pre_t <- filter(d, tx ==  "0.5") %>% summarise(s = sd(t1)) %>% pull()  # treatment baseline SD
sd_raw_pre_c <- filter(d, tx == "-0.5") %>% summarise(s = sd(t1)) %>% pull()  # control baseline SD
sd_raw_pre_c
sd_raw_pre_t
sd_raw_pre_p <- sqrt((sd_raw_pre_c^2 + sd_raw_pre_t^2) / 2)
sd_raw_pre_p
# define the sample sizes
n_t <- 10
n_c <- 10
# compute the sample size robust pooled SD
sqrt(((n_t - 1) * sd_raw_pre_c^2 + (n_c - 1) * sd_raw_pre_t^2) / (n_t + n_c - 2))
fixef(fit1)["time0:tx", 1] * 3 / sd_raw_pre_c
posterior_samples(fit1) %>%
mutate(d = `b_time0:tx` * 3 / sd_raw_pre_p) %>%
ggplot(aes(x = d, y = 0)) +
geom_vline(xintercept = 0, linetype = 2) +
stat_halfeye(.width = .95) +
scale_y_continuous(NULL, breaks = NULL) +
xlab(expression(italic(d)[GMA-raw]~("standardized difference in change scores")))
posterior_samples(fit1) %>%
mutate(d = `b_time0:tx` * 3 / sd_raw_pre_p) %>%
median_qi(d) %>%
mutate_if(is.double, round, digits = 2)
posterior_samples(fit1) %>%
# simplify the output
select(starts_with("b_")) %>%
# compute the treatment-level means for pre and post
mutate(m_pre_t  = b_Intercept + b_time0 * 0 + b_tx *  0.5 + `b_time0:tx`* 0 *  0.5,
m_pre_c  = b_Intercept + b_time0 * 0 + b_tx * -0.5 + `b_time0:tx`* 0 * -0.5,
m_post_t = b_Intercept + b_time0 * 3 + b_tx *  0.5 + `b_time0:tx`* 3 *  0.5,
m_post_c = b_Intercept + b_time0 * 3 + b_tx * -0.5 + `b_time0:tx`* 3 * -0.5) %>%
# compute the treatment-level change scores
mutate(m_change_t = m_post_t - m_pre_t,
m_change_c = m_post_c - m_pre_c) %>%
# compute the difference of differences
mutate(beta_11 = m_change_t - m_change_c) %>%
# compute the multilevel effect size
mutate(d_GAM_raw = beta_11 / sd_raw_pre_c) %>%
# wrangle and summarize
pivot_longer(m_pre_t:d_GAM_raw) %>%
group_by(name) %>%
mean_qi(value) %>%
mutate_if(is.double, round, digits = 2)
# group-level baseline means
m_raw_pre_t <- filter(d, tx ==  "0.5") %>% summarise(m = mean(`t1`)) %>% pull()
m_raw_pre_c <- filter(d, tx ==  "-0.5") %>% summarise(m = mean(`t1`)) %>% pull()
# weighted (pooled) baseline mean
m_raw_pre_p <- (m_raw_pre_t * n_t + m_raw_pre_c * n_c) / (n_t + n_c)
m_raw_pre_p
d_long <-
d_long %>%
mutate(z = (y - m_raw_pre_p) / sd_raw_pre_p)
fit2 <-
brm(data = d_long,
family = gaussian,
z ~ 1 + time0 + tx + time0:tx + (1 + time0 | id),
cores = 4,
seed = 1)
print(fit2)
fixef(fit2)["time0:tx", -2]
fixef(fit2)["time0:tx", -2] * 3
rbind(fixef(fit1)["time0:tx", -2] * 3 / sd_raw_pre_p,
fixef(fit2)["time0:tx", -2] * 3) %>%
data.frame() %>%
mutate(data = c("unstandardized data", "standardized data")) %>%
ggplot(aes(x = Estimate, xmin = Q2.5, xmax = Q97.5, y = data)) +
geom_vline(xintercept = 0, linetype = 2) +
geom_pointrange(fatten = 1) +
labs(x = expression(italic(d)[GMA-raw]~("standardized difference in change scores")),
y = NULL) +
theme(axis.text.y = element_text(hjust = 0))
sessionInfo()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
install.packages("blogdown")
install.packages("blogdown")
install.packages("blogdown")
library(tidyverse)
library(tidyverse)
mtcars
library(tidyverse)
mtcars %>%
ggplot(aes(x = qsec, y = a)) +
geom_point()
mtcars
library(tidyverse)
mtcars %>%
ggplot(aes(x = qsec, y = drat)) +
geom_point()
blogdown:::preview_site()
blogdown::check_hugo()
blogdown::install_hugo()
blogdown::config_Rprofile()
blogdown:::preview_site()
summary(Orange)
Orange
ggplot(Orange, aes(x = age,
y = circumference,
colour = Tree)) +
geom_point() +
geom_line() +
guides(colour = FALSE) +
theme_bw()
library(tidyverse)
mtcars %>%
ggplot(aes(x = qsec, y = drat)) +
geom_point()
ggplot(Orange, aes(x = age,
y = circumference,
colour = Tree)) +
geom_point() +
geom_line() +
guides(colour = FALSE) +
theme_bw()
Orange %>%
ggplot(aes(x = age, y = circumference, colour = Tree)) +
geom_point() +
geom_line() +
guides(colour = FALSE) +
theme_bw()
Orange %>%
ggplot(aes(x = age, y = circumference, colour = Tree)) +
geom_point() +
geom_line() +
guides(colour = FALSE) +
xlim(0, NA) +
theme_bw()
blogdown::check_gitignore()
blogdown::check_content()
blogdown::check_netlify()
blogdown::config_netlify()
blogdown::check_hugo()
blogdown:::preview_site()
